[{"/Users/alex/Documents/web/react/store/client/src/index.js":"1","/Users/alex/Documents/web/react/store/client/src/App.js":"2","/Users/alex/Documents/web/react/store/client/src/reportWebVitals.js":"3","/Users/alex/Documents/web/react/store/client/src/components/Header.js":"4","/Users/alex/Documents/web/react/store/client/src/screens/HomeScreen.js":"5","/Users/alex/Documents/web/react/store/client/src/components/Footer.js":"6","/Users/alex/Documents/web/react/store/client/src/screens/ProductListScreen.js":"7","/Users/alex/Documents/web/react/store/client/src/screens/ProductScreen.js":"8","/Users/alex/Documents/web/react/store/client/src/redux/store.js":"9","/Users/alex/Documents/web/react/store/client/src/screens/CreateProductScreen.js":"10","/Users/alex/Documents/web/react/store/client/src/screens/ProductEditScreen.js":"11","/Users/alex/Documents/web/react/store/client/src/redux/types.js":"12","/Users/alex/Documents/web/react/store/client/src/components/OffCanvas.js":"13","/Users/alex/Documents/web/react/store/client/src/components/FormContainer.js":"14","/Users/alex/Documents/web/react/store/client/src/components/SearchBox.js":"15","/Users/alex/Documents/web/react/store/client/src/components/Product.js":"16","/Users/alex/Documents/web/react/store/client/src/components/Loader.js":"17","/Users/alex/Documents/web/react/store/client/src/components/Message.js":"18","/Users/alex/Documents/web/react/store/client/src/redux/actions/filterActions.js":"19","/Users/alex/Documents/web/react/store/client/src/redux/actions/productActions.js":"20","/Users/alex/Documents/web/react/store/client/src/redux/reducers/filterReducers.js":"21","/Users/alex/Documents/web/react/store/client/src/redux/reducers/productReducers.js":"22","/Users/alex/Documents/web/react/store/client/src/components/Rating.js":"23","/Users/alex/Documents/web/react/store/client/src/components/AccordionFilter.js":"24","/Users/alex/Documents/web/react/store/client/src/redux/reducers/colorReducers.js":"25","/Users/alex/Documents/web/react/store/client/src/redux/reducers/sizeReducers.js":"26","/Users/alex/Documents/web/react/store/client/src/redux/reducers/brandReducers.js":"27","/Users/alex/Documents/web/react/store/client/src/redux/reducers/categoryReducers.js":"28","/Users/alex/Documents/web/react/store/client/src/screens/CreateSpecScreen.js":"29","/Users/alex/Documents/web/react/store/client/src/redux/actions/colorActions.js":"30","/Users/alex/Documents/web/react/store/client/src/redux/actions/sizeActions.js":"31","/Users/alex/Documents/web/react/store/client/src/redux/actions/brandActions.js":"32","/Users/alex/Documents/web/react/store/client/src/redux/actions/categoryActions.js":"33","/Users/alex/Documents/web/react/store/client/src/screens/SpecListScreen.js":"34","/Users/alex/Documents/web/react/store/client/src/components/Table.js":"35","/Users/alex/Documents/web/react/store/client/src/screens/SpecEditScreen.js":"36","/Users/alex/Documents/web/react/store/client/src/components/EditSize.js":"37","/Users/alex/Documents/web/react/store/client/src/components/EditBrand.js":"38","/Users/alex/Documents/web/react/store/client/src/components/EditColor.js":"39","/Users/alex/Documents/web/react/store/client/src/components/EditCategory.js":"40"},{"size":250,"mtime":1634242101600,"results":"41","hashOfConfig":"42"},{"size":1977,"mtime":1640184328424,"results":"43","hashOfConfig":"42"},{"size":362,"mtime":1639579131504,"results":"44","hashOfConfig":"42"},{"size":2705,"mtime":1639820715355,"results":"45","hashOfConfig":"42"},{"size":3040,"mtime":1639613934251,"results":"46","hashOfConfig":"42"},{"size":382,"mtime":1629965819092,"results":"47","hashOfConfig":"42"},{"size":4397,"mtime":1639770756563,"results":"48","hashOfConfig":"42"},{"size":8876,"mtime":1639769080523,"results":"49","hashOfConfig":"42"},{"size":1954,"mtime":1639624311624,"results":"50","hashOfConfig":"42"},{"size":9349,"mtime":1640082459308,"results":"51","hashOfConfig":"42"},{"size":9930,"mtime":1640159145782,"results":"52","hashOfConfig":"42"},{"size":5333,"mtime":1639621551904,"results":"53","hashOfConfig":"42"},{"size":1001,"mtime":1634235586641,"results":"54","hashOfConfig":"42"},{"size":377,"mtime":1630619683082,"results":"55","hashOfConfig":"42"},{"size":868,"mtime":1634239074715,"results":"56","hashOfConfig":"42"},{"size":967,"mtime":1639770039672,"results":"57","hashOfConfig":"42"},{"size":392,"mtime":1630309258903,"results":"58","hashOfConfig":"42"},{"size":541,"mtime":1634937563044,"results":"59","hashOfConfig":"42"},{"size":327,"mtime":1639619374735,"results":"60","hashOfConfig":"42"},{"size":5955,"mtime":1640077175743,"results":"61","hashOfConfig":"42"},{"size":386,"mtime":1634234406378,"results":"62","hashOfConfig":"42"},{"size":4576,"mtime":1639814828926,"results":"63","hashOfConfig":"42"},{"size":1720,"mtime":1629977390918,"results":"64","hashOfConfig":"42"},{"size":2762,"mtime":1634243386158,"results":"65","hashOfConfig":"42"},{"size":2906,"mtime":1639623267793,"results":"66","hashOfConfig":"42"},{"size":2858,"mtime":1639623303033,"results":"67","hashOfConfig":"42"},{"size":2899,"mtime":1640185268218,"results":"68","hashOfConfig":"42"},{"size":3053,"mtime":1639623526908,"results":"69","hashOfConfig":"42"},{"size":6173,"mtime":1639817530338,"results":"70","hashOfConfig":"42"},{"size":4316,"mtime":1640191563801,"results":"71","hashOfConfig":"42"},{"size":4294,"mtime":1640167966999,"results":"72","hashOfConfig":"42"},{"size":4295,"mtime":1640186432943,"results":"73","hashOfConfig":"42"},{"size":4449,"mtime":1640191999651,"results":"74","hashOfConfig":"42"},{"size":3920,"mtime":1640176785074,"results":"75","hashOfConfig":"42"},{"size":1989,"mtime":1640179401445,"results":"76","hashOfConfig":"42"},{"size":751,"mtime":1640191961149,"results":"77","hashOfConfig":"42"},{"size":2531,"mtime":1640180966596,"results":"78","hashOfConfig":"42"},{"size":2822,"mtime":1640186502318,"results":"79","hashOfConfig":"42"},{"size":3463,"mtime":1640191617881,"results":"80","hashOfConfig":"42"},{"size":3653,"mtime":1640192469195,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"125mhf8",{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"84"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"84"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},"/Users/alex/Documents/web/react/store/client/src/index.js",[],["172","173"],"/Users/alex/Documents/web/react/store/client/src/App.js",[],"/Users/alex/Documents/web/react/store/client/src/reportWebVitals.js",[],"/Users/alex/Documents/web/react/store/client/src/components/Header.js",["174","175","176","177"],"import React from \"react\";\nimport { Navbar, Nav, Container, NavDropdown, Badge } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { CART_RESET } from \"../redux/types\";\n\n\nconst Header = () => {\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  return (\n    <header>\n\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n        <Container>\n          <LinkContainer to=\"/\">\n            <Navbar.Brand>eCommerce Shop</Navbar.Brand>\n          \n          </LinkContainer>\n\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n          \n            <Nav className=\"ms-auto\">\n              <LinkContainer to=\"/cart\">\n                <Nav.Link>\n                  <i className=\"fas fa-shopping-cart\"></i> Cart\n               <Badge pill bg=\"danger\" style={{position:'relative',bottom:7,left:2}}>\n                   {0}\n                  </Badge>\n                </Nav.Link>\n              </LinkContainer>\n\n              \n                <NavDropdown title={\"hello Admin\"} id=\"username\">\n                  <LinkContainer to=\"/profile\">\n                    <NavDropdown.Item><i className=\"fas fa-user\"></i> Profile</NavDropdown.Item>\n                  </LinkContainer>\n\n                  {(\n                    <>\n                      <LinkContainer to=\"/admin/users\">\n                        <NavDropdown.Item><i className=\"fas fa-users\"></i> Users</NavDropdown.Item>\n                      </LinkContainer>\n\n                      <LinkContainer to=\"/admin/orders\">\n                        <NavDropdown.Item><i className=\"fas fa-box\"></i> Orders</NavDropdown.Item>\n                      </LinkContainer>\n\n                      <LinkContainer to=\"/admin/products\">\n                        <NavDropdown.Item><i className=\"fas fa-store\"></i> Products</NavDropdown.Item>\n                      </LinkContainer>\n\n                      <LinkContainer to=\"/admin/api/post\">\n                        <NavDropdown.Item><i className=\"fas fa-database\"></i> API post</NavDropdown.Item>\n                      </LinkContainer>\n\n                      <LinkContainer to=\"/admin/api/get\">\n                        <NavDropdown.Item><i className=\"fas fa-database\"></i> API get</NavDropdown.Item>\n                      </LinkContainer>\n                    </>\n                  )}\n\n                </NavDropdown>\n              \n                \n              \n            </Nav>\n          \n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </header>\n  );\n};\n\nexport default Header;\n","/Users/alex/Documents/web/react/store/client/src/screens/HomeScreen.js",[],"/Users/alex/Documents/web/react/store/client/src/components/Footer.js",[],"/Users/alex/Documents/web/react/store/client/src/screens/ProductListScreen.js",[],"/Users/alex/Documents/web/react/store/client/src/screens/ProductScreen.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/store.js",[],"/Users/alex/Documents/web/react/store/client/src/screens/CreateProductScreen.js",["178","179","180","181","182","183","184","185"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Col, Button, FloatingLabel } from \"react-bootstrap/\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport FormContainer from \"../components/FormContainer\";\nimport { createProduct } from \"../redux/actions/productActions\";\n\n\nimport { getBrands } from \"../redux/actions/brandActions\";\nimport { getCategories } from \"../redux/actions/categoryActions\";\nimport { getColors } from \"../redux/actions/colorActions\";\nimport { getSizes } from \"../redux/actions/sizeActions\";\n\n\nconst CreateProductScreen = ({ history }) => {\n  const [title, setTitle] = useState(\"\");\n  const [price, setPrice] = useState(null);\n  const [quantity, setQuantity] = useState(null);\n  const [image, setImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n  const [category, setCategory] = useState({});\n  const [color, setColor] = useState([]);\n  const [size, setSize] = useState([]);\n\n  const [message, setMessage] = useState(\"\");\n\n  //state for validation of the form\n  const [validated, setValidated] = useState(false);\n\n  const [uploading, setUploading] = useState(false);\n\n  const dispatch = useDispatch();\n\n  //GET ALL DATA FROM REDUX STATE\n  const productCreate = useSelector((state) => state.productCreate);\n  const { error, success, loading } = productCreate;\n\n  const brandsList = useSelector((state) => state.brandsListReducer);\n  const { brands, loading: brandsLoading } = brandsList;\n\n  const categoriesList = useSelector((state) => state.categoryListReducer);\n  const { categories, loading: categoriesLoading } = categoriesList;\n\n  const colorsList = useSelector((state) => state.colorListReducer);\n  const { colors, loading: colorsLoading } = colorsList;\n\n  const sizesList = useSelector((state) => state.sizeListReducer);\n  const { sizes, loading: sizesLoading } = sizesList;\n\n  useEffect(() => {\n    dispatch(getBrands());\n    dispatch(getColors());\n    dispatch(getCategories());\n    dispatch(getSizes());\n  }, []);\n\n  useEffect(() => {\n    if (success) {\n      setMessage(\"Product Created successfully\");\n      setTimeout(() => {\n        dispatch({ type: \"PRODUCT_CREATE_RESET\" });\n        history.push(\"/admin/products\");\n      }, 1500);\n    }\n  }, [dispatch, history, success]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    if (form.checkValidity() === true) {\n      dispatch(\n        createProduct({\n          title,\n          price,\n          quantity,\n          description,\n          colors: color,\n          brand,\n          sizes: size,\n          categories: category,\n          image,\n        })\n      );\n    } else {\n      e.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n\n  return (\n    <>\n      <FormContainer>\n        <h1>Create new Product</h1>\n        {loading && <Loader />}\n        {message && (\n          <Message\n            variant={success ? \"success\" : \"danger\"}\n            text={message}\n          ></Message>\n        )}\n        {error && <Message variant=\"danger\" text={error}></Message>}\n\n        <Form onSubmit={submitHandler} noValidate validated={validated}>\n          <Form.Group controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              required\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            ></Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"price\">\n            <Form.Label>Price</Form.Label>\n            <Form.Control\n              required\n              type=\"number\"\n              placeholder=\"Product price\"\n              value={price}\n              onChange={(e) => setPrice(e.target.value)}\n            ></Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"quantity\" className=\"mt-3\">\n            <Form.Label>Quantity</Form.Label>\n            <Form.Control\n              required\n              type=\"number\"\n              placeholder=\"Product Quantity\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            ></Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"brand\" className=\"mt-3\" custom>\n            <Form.Label>Select brand</Form.Label>\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(e) => {\n                setBrand(e.target.value);\n              }}\n            >\n              <option value=\"\">select brand</option>\n              {brands.map((item) => (\n                <>\n                  <option key={item._id} value={item.brandName}>\n                    {item.brandName}\n                  </option>\n                </>\n              ))}\n            </Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n         \n          <Form.Group controlId=\"color\" className=\"mt-3\">\n            <Form.Label>Select color</Form.Label>\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(e) => {\n                setColor(e.target.value);\n              }}\n            >\n              <option value=\"\">select color</option>\n              {colors.map((col) => (\n                <>\n                  <option key={col._id} value={col.colorName}>\n                    {col.colorName}\n                  </option>\n                </>\n              ))}\n            </Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"sizes\" className=\"mt-3\">\n            <Form.Label>Select sizes</Form.Label>\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(e) => setSize(e.target.value)}\n           \n            >\n              <option value=\"\">select size</option>\n              {sizes.map((s) => (\n                <option key={s.size} value={s.size}>\n                  {s.size}\n                </option>\n              ))}\n            </Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"category\" className=\"mt-3\">\n            <Form.Label>Category</Form.Label>\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(e) =>\n                setCategory((prevState) => ({\n                  ...prevState,\n                  categoryName: e.target.value,\n                }))\n              }\n            >\n              <option value=\"\">Select type of clothes</option>\n              {Array.from(new Set(categories.map((a) => a.categoryName)))\n                .map((cat) => categories.find((a) => a.categoryName === cat))\n                .map((cat) => (\n                  <option key={cat._id} value={cat.categoryName}>\n                    {cat.categoryName}\n                  </option>\n                ))}\n            </Form.Control>\n\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(e) =>\n                setCategory((prevState) => ({\n                  ...prevState,\n                  department: e.target.value,\n                }))\n              }\n            >\n              <option value=\"\">Select department of clothes</option>\n              {Array.from(new Set(categories.map((a) => a.department)))\n                .map((cat) => categories.find((a) => a.department === cat))\n                .map((cat) => (\n                  <option key={cat._id} value={cat.department}>\n                    {cat.department}\n                  </option>\n                ))}\n            </Form.Control>\n\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"description\" className=\"mt-3\">\n            <Form.Label>Description</Form.Label>\n            <FloatingLabel controlId=\"description\" label=\"description\">\n              <Form.Control\n                required\n                as=\"textarea\"\n                value={description}\n                style={{ height: \"100px\" }}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </FloatingLabel>\n          </Form.Group>\n\n          <Form.Group controlId=\"img\" className=\"mt-3\">\n            <Form.Label>Image</Form.Label>\n            <Form.Control\n              required\n              type=\"text\"\n              placeholder=\"Product Image URL\"\n              value={image}\n              onChange={(e) => setImage(e.target.value)}\n            ></Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n           \n          </Form.Group>\n\n  \n\n          <Button type=\"submit\" variant=\"primary\" className=\"mt-3\">\n            Create\n          </Button>\n        </Form>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default CreateProductScreen;\n","/Users/alex/Documents/web/react/store/client/src/screens/ProductEditScreen.js",["186","187","188","189","190","191"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button,FloatingLabel } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport {listProductDetails,editProduct} from \"../redux/actions/productActions\";\nimport {PRODUCT_UPDATE_RESET} from \"../redux/types\";\nimport FormContainer from \"../components/FormContainer\";\n\n\nimport { getBrands } from \"../redux/actions/brandActions\";\nimport { getCategories } from \"../redux/actions/categoryActions\";\nimport { getColors } from \"../redux/actions/colorActions\";\nimport { getSizes } from \"../redux/actions/sizeActions\";\n\n\nconst ProductEditScreen = ({ match, history }) => {\n\n  const productID = match.params.id\n\n  const [title, setTitle] = useState(\"\");\n  const [price, setPrice] = useState(null);\n  const [quantity, setQuantity] = useState(null);\n  const [image, setImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n  const [category, setCategory] = useState({});\n  const [color, setColor] = useState([]);\n  const [size, setSize] = useState([]);\n\n  const [message,setMessage] = useState(\"\")\n\n  const dispatch = useDispatch();\n\n  const productDetails = useSelector(state => state.productDetails);\n\n  const { loading, error , product } = productDetails;\n\n\n  const updateProduct = useSelector((state) => state.productUpdateReducer);\n\n  const { loading:loadingUpdate, error:errorUpdate, success:successUpdate } = updateProduct;\n\n\n  \n  const brandsList = useSelector((state) => state.brandsListReducer);\n  const { brands, loading: brandsLoading } = brandsList;\n\n  const categoriesList = useSelector((state) => state.categoryListReducer);\n  const { categories, loading: categoriesLoading } = categoriesList;\n\n  const colorsList = useSelector((state) => state.colorListReducer);\n  const { colors, loading: colorsLoading } = colorsList;\n\n  const sizesList = useSelector((state) => state.sizeListReducer);\n  const { sizes, loading: sizesLoading } = sizesList;\n  \n    useEffect(() =>{\n\n      //checks if update product success\n      if(successUpdate){\n    \n        setMessage(\"Product updated successfully\")\n        setTimeout(()=>{\n          dispatch({type:PRODUCT_UPDATE_RESET})\n          history.push('/admin/products')\n        },1500)\n    \n        \n    }else{\n      if(!product || product._id!==productID){\n        dispatch(listProductDetails(productID))\n      }\n      setTitle(product.title)\n      setPrice(product.price)\n      setQuantity(product.quantity)\n      setImage(product.image)\n      setDescription(product.description)\n     \n\n    }\n    \n    },[dispatch,productID,history,successUpdate,error,errorUpdate])\n\n    useEffect(() => {\n      dispatch(getBrands());\n      dispatch(getColors());\n      dispatch(getCategories());\n      dispatch(getSizes());\n    }, []);\n  \n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(editProduct(\n      {\n        _id:productID,\n        title,\n        price,\n        quantity,\n        description,\n        colors: [color],\n        brand,\n        sizes: [size],\n        categories: category,\n        image,\n      \n      }\n    ))\n   \n};\n\n  return (\n    <>\n    <Link to='/admin/products' className='btn btn-light my-3'>\n      Go Back\n    </Link>\n\n    {}\n  \n \n      <h1>Edit Product</h1>\n      {loadingUpdate && <Loader/>}\n      {loading && <Loader/>}\n      {error && <Message variant=\"danger\" text={error}></Message>}\n      {message && <Message variant={successUpdate ? 'success' : 'danger'} text={message}></Message>}\n      {errorUpdate && <Message variant=\"danger\" text={errorUpdate}></Message>}\n  \n      <FormContainer>\n      <Form onSubmit={submitHandler} noValidate>\n          <Form.Group controlId=\"title\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              required\n              type=\"text\"\n              placeholder=\"Enter title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            ></Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"price\">\n            <Form.Label>Price</Form.Label>\n            <Form.Control\n              required\n              type=\"number\"\n              placeholder=\"Product price\"\n              value={price}\n              onChange={(e) => setPrice(e.target.value)}\n            ></Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"quantity\" className=\"mt-3\">\n            <Form.Label>Quantity</Form.Label>\n            <Form.Control\n              required\n              type=\"number\"\n              placeholder=\"Product Quantity\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            ></Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"brand\" className=\"mt-3\" custom>\n            <Form.Label>Select brand</Form.Label>\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(e) => {\n                setBrand(e.target.value);\n              }}\n          \n            >\n              <option value=\"\">select brand</option>\n              {brands.map((item) => (\n                <>\n                  <option key={item._id} value={item.brandName}>\n                    {item.brandName}\n                  </option>\n                </>\n              ))}\n            \n            </Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"color\" className=\"mt-3\">\n            <Form.Label>Select color</Form.Label>\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(e) => {\n                setColor(e.target.value);\n              }}\n            >\n              <option value=\"\">select color</option>\n              {colors.map((col) => (\n                <>\n                  <option key={col._id} value={col.colorName}>\n                    {col.colorName}\n                  </option>\n                </>\n              ))}\n            </Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"sizes\" className=\"mt-3\">\n            <Form.Label>Select sizes</Form.Label>\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(e) => setSize(e.target.value)}\n              \n            >\n              <option value=\"\">select size</option>\n              {sizes.map((s) => (\n                <option key={s.size} value={s.size}>\n                  {s.size}\n                </option>\n              ))}\n            </Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"category\" className=\"mt-3\">\n            <Form.Label>Category</Form.Label>\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(e) =>\n                setCategory((prevState) => ({\n                  ...prevState,\n                  categoryName: e.target.value,\n                }))\n              }\n            >\n              <option value=\"\">Select type of clothes</option>\n              {Array.from(new Set(categories.map((a) => a.categoryName)))\n                .map((cat) => categories.find((a) => a.categoryName === cat))\n                .map((cat) => (\n                  <option key={cat._id} value={cat.categoryName}>\n                    {cat.categoryName}\n                  </option>\n                ))}\n           \n            </Form.Control>\n\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={(e) =>\n                setCategory((prevState) => ({\n                  ...prevState,\n                  department: e.target.value,\n                }))\n              }\n            >\n              <option value=\"\">Select department of clothes</option>\n              {Array.from(new Set(categories.map((a) => a.department)))\n                .map((cat) => categories.find((a) => a.department === cat))\n                .map((cat) => (\n                  <option key={cat._id} value={cat.department}>\n                  {cat.department}\n                </option>\n                ))}\n             \n            </Form.Control>\n\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group controlId=\"description\" className=\"mt-3\">\n            <Form.Label>Description</Form.Label>\n            <FloatingLabel controlId=\"description\" label=\"description\">\n              <Form.Control\n                required\n                as=\"textarea\"\n                value={description}\n                style={{ height: \"100px\" }}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n               <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </FloatingLabel>\n           \n          </Form.Group>\n\n          <Form.Group controlId=\"img\" className=\"mt-3\">\n            <Form.Label>Image</Form.Label>\n            <Form.Control\n              required\n              type=\"text\"\n              placeholder=\"Product Image URL\"\n              value={image}\n              onChange={(e) => setImage(e.target.value)}\n            ></Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n         \n          </Form.Group>\n\n          <Button type=\"submit\" variant=\"primary\" className=\"mt-3\">\n            Update\n          </Button>\n        </Form>\n    </FormContainer>\n    </>\n  );\n};\n\nexport default ProductEditScreen;\n","/Users/alex/Documents/web/react/store/client/src/redux/types.js",[],"/Users/alex/Documents/web/react/store/client/src/components/OffCanvas.js",[],"/Users/alex/Documents/web/react/store/client/src/components/FormContainer.js",[],"/Users/alex/Documents/web/react/store/client/src/components/SearchBox.js",[],"/Users/alex/Documents/web/react/store/client/src/components/Product.js",[],"/Users/alex/Documents/web/react/store/client/src/components/Loader.js",[],"/Users/alex/Documents/web/react/store/client/src/components/Message.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/actions/filterActions.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/actions/productActions.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/reducers/filterReducers.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/reducers/productReducers.js",[],"/Users/alex/Documents/web/react/store/client/src/components/Rating.js",[],"/Users/alex/Documents/web/react/store/client/src/components/AccordionFilter.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/reducers/colorReducers.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/reducers/sizeReducers.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/reducers/brandReducers.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/reducers/categoryReducers.js",[],"/Users/alex/Documents/web/react/store/client/src/screens/CreateSpecScreen.js",["192","193","194"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Row, Col, FloatingLabel } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport FormContainer from \"../components/FormContainer\";\n\nimport { createColor } from \"../redux/actions/colorActions\";\nimport { createSize } from \"../redux/actions/sizeActions\";\nimport { createBrand } from \"../redux/actions/brandActions\";\nimport { createCategory } from \"../redux/actions/categoryActions\";\n\nexport const CreateSpecs = () => {\n  const dispatch = useDispatch();\n\n  const colorCreate = useSelector((state) => state.colorCreateReducer);\n\n  const {\n    error: errorColor,\n    success: successColor,\n    loading: loadingColor,\n  } = colorCreate;\n\n\n  const categoryCreate = useSelector((state) => state.categoryCreateReducer);\n\n  const {\n    error: errorCategory,\n    success: successCategory,\n    loading: loadingCategory,\n  } = categoryCreate;\n\n  const sizeCreate = useSelector((state) => state.sizeCreateReducer);\n\n  const {\n    error: errorSize,\n    success: successSize,\n    loading: loadingSize,\n  } = sizeCreate;\n\n  const brandCreate = useSelector((state) => state.brandCreateReducer);\n\n  const {\n    error: errorBrand,\n    success: successBrand,\n    loading: loadingBrand,\n  } = brandCreate;\n\n  const [color, setColor] = useState({\n    colorName: \"\",\n    colorHex: \"\",\n  });\n  const [size, setSize] = useState({\n    size:\"\"\n  });\n  const [brand, setBrand] = useState({\n    brandName: \"\",\n  });\n  const [category, setCategory] = useState({\n    department: \"\",\n    categoryName: \"\",\n  });\n\n\n  const [message, setMessage] = useState(\"\");\n\n\n  useEffect(() =>{\n    if(successCategory||successColor||successSize||successBrand){\n      setMessage(\"Successfully created\");\n      setTimeout(() => {\n        setMessage(\"\");\n      } , 5000);\n    }else if(errorCategory||errorColor||errorSize||errorBrand){\n      setMessage(errorCategory ? errorCategory : errorColor ? errorColor : errorSize ? errorSize : errorBrand);\n      setTimeout(() => {\n        setMessage(\"\");\n      } , 5000);\n    }\n  },[successCategory,successBrand,successColor,successSize,errorCategory,errorColor,errorSize,errorBrand] )\n\n  const colorHandler = (e) => {\n    e.preventDefault();\n    dispatch(createColor(color));\n    setColor({\n      colorName: \"\",\n      colorHex: \"\",\n    })\n  };\n\n  const sizeHandler = (e) => {\n    e.preventDefault();\n    dispatch(createSize(size));\n    setSize({size:\"\"});\n  };\n\n  const brandHandler = (e) => {\n    e.preventDefault();\n    dispatch(createBrand(brand));\n    setBrand({brandName:\"\"});\n  };\n\n  const categoryHandler = (e) => {\n    e.preventDefault();\n    dispatch(createCategory(category));\n\n    setCategory({\n      department: \"\",\n      categoryName: \"\",\n    });\n  };\n\n\n  return (\n    <FormContainer>\n      <h1>Create new specifications</h1>\n      {loadingColor && <Loader />}\n      {loadingSize && <Loader />}\n      {loadingCategory && <Loader />}\n      {loadingBrand && <Loader />}\n      {message && (\n        <Message\n          variant={successColor || successCategory || successBrand || successSize ? \"success\" : \"danger\"}\n          text={message}\n        ></Message>\n      )}\n      \n      <Form>\n        <Form.Group controlId=\"color\" className=\"mt-3\">\n          <Form.Label>Color name</Form.Label>\n          <Form.Control\n        \n            type=\"text\"\n            placeholder=\"Enter color name\"\n            value={color.colorName}\n            onChange={(e) => setColor({colorName:e.target.value,colorHex:color.colorHex})}\n          ></Form.Control>\n\n          <Form.Label>Color Hex value</Form.Label>\n          <Form.Control\n           \n            type=\"text\"\n            placeholder=\"Enter color hex\"\n            value={color.colorHex}\n            onChange={(e) => setColor({colorName:color.colorName,colorHex:e.target.value})}\n          ></Form.Control>\n\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            className=\"mt-3\"\n            onClick={colorHandler}\n          >\n            Create color\n          </Button>\n        </Form.Group>\n\n        <Form.Group controlId=\"brand\" className=\"mt-3\">\n          <Form.Label>Brand</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Brand\"\n            value={brand.brandName}\n            onChange={(e) => setBrand({brandName:e.target.value})}\n          ></Form.Control>\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            className=\"mt-3\"\n            onClick={brandHandler}\n          >\n            Create Brand\n          </Button>\n        </Form.Group>\n\n        <Form.Group controlId=\"size\" className=\"mt-3\">\n          <Form.Label>Size</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"size e.g S/M/L..\"\n            value={size.size}\n            onChange={(e) => setSize({size:e.target.value})}\n          ></Form.Control>\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            className=\"mt-3\"\n            onClick={sizeHandler}\n          >\n            Create size\n          </Button>\n        </Form.Group>\n\n        <Form.Group controlId=\"category\" className=\"mt-3\">\n          <Form.Label>Category</Form.Label>\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"department e.g Mens/Womens\"\n            value={category.department}\n            onChange={(e) => setCategory({department:e.target.value,categoryName:category.categoryName})}\n          ></Form.Control>\n\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"category name e.g Jackets\"\n            value={category.categoryName}\n            onChange={(e) => setCategory({categoryName:e.target.value,department:category.department})}\n          ></Form.Control>\n\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            className=\"mt-3\"\n            onClick={categoryHandler}\n          >\n            Create category\n          </Button>\n        </Form.Group>\n      </Form>\n    </FormContainer>\n  );\n};\n","/Users/alex/Documents/web/react/store/client/src/redux/actions/colorActions.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/actions/sizeActions.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/actions/brandActions.js",[],"/Users/alex/Documents/web/react/store/client/src/redux/actions/categoryActions.js",[],"/Users/alex/Documents/web/react/store/client/src/screens/SpecListScreen.js",["195","196","197","198"],"import React, { useEffect} from \"react\";\nimport {\n\n  Button,\n  Row,\n  Col\n} from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\n\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport { getBrands ,deleteBrand} from \"../redux/actions/brandActions\";\nimport { getCategories,deleteCategory} from \"../redux/actions/categoryActions\";\nimport { getColors,deleteColor} from \"../redux/actions/colorActions\";\nimport { getSizes,deleteSize} from \"../redux/actions/sizeActions\";\nimport TableData from \"../components/Table\";\n\n\n\nconst SpecListScreen = () => {\n\n  const dispatch = useDispatch();\n\n\n  const brandsList = useSelector((state) => state.brandsListReducer);\n  const { brands, loading: brandsLoading,error:errorBrands } = brandsList;\n\n  const categoriesList = useSelector((state) => state.categoryListReducer);\n  const { categories, loading: categoriesLoading ,error:errorCategories} = categoriesList;\n\n  const colorsList = useSelector((state) => state.colorListReducer);\n  const { colors, loading: colorsLoading,error:errorColors } = colorsList;\n\n  const sizesList = useSelector((state) => state.sizeListReducer);\n  const { sizes, loading: sizesLoading,error:errorSizes } = sizesList;\n\n  const colorDelete = useSelector((state) => state.colorDeleteReducer);\n  const { success: successDeleteColor, error: errorDeleteColor } = colorDelete;\n\n  const sizeDelete = useSelector((state) => state.sizeDeleteReducer);\n  const { success: successDeleteSize, error: errorDeleteSize} = sizeDelete;\n\n  const brandDelete = useSelector((state) => state.brandDeleteReducer);\n  const { success: successDeleteBrand, error: errorDeleteBrand } = brandDelete;\n\n  const categoryDelete = useSelector((state) => state.categoryDeleteReducer);\n  const { success: successDeleteCategory, error: errorDeleteCategory } = categoryDelete;\n  \n\n\n  useEffect(() => {\n    dispatch(getBrands());\n    dispatch(getColors());\n    dispatch(getCategories());\n    dispatch(getSizes());\n  }, [dispatch,successDeleteBrand,successDeleteCategory,successDeleteColor,successDeleteSize]);\n\n  const deleteColorHandler = (id) => {\n\n    dispatch(deleteColor(id));\n  };\n\n  const deleteSizeHandler = (id) => {\n    dispatch(deleteSize(id));\n  };\n\n  const deleteCategoryHandler = (id) => {\n    dispatch(deleteCategory(id));\n  };\n\n  const deleteBrandHandler = (id) => {\n    dispatch(deleteBrand(id));\n  };\n\n    \n  // const filterColorsHandler = (keyword) => {\n \n  //   if (keyword !== \"\") {\n  //     let filteredColors = array?.filter((item) =>(item.colorName.toLowerCase().includes(name.toLowerCase())));\n  //     setColors(filteredColors);\n  //   } else {\n  //     setColors(colorsList);\n   \n  //   }\n  // };\n\n  return (\n    <>\n      <h1>ALL API DATA</h1>\n      <Row className=\"d-flex justify-content-center mb-4\" md='auto'>\n       \n        <Col className=\"text-right\" >\n          <LinkContainer to={`/admin/api/post`}>\n            <Button >\n              <i className=\"fas fa-plus\"></i> Create new specifications\n            </Button>\n          </LinkContainer>\n        </Col>\n       \n      </Row>\n\n      {colorsLoading || sizesLoading || brandsLoading || categoriesLoading ? (\n        <Loader />\n      ) : errorColors || errorSizes || errorCategories || errorBrands ? (\n        <Message variant=\"danger\" text={errorCategories ? errorCategories : errorColors ? errorColors : errorSizes ? errorSizes : errorBrands} />\n      ) : (\n        <>\n        <TableData array={colors} deleteHandler={deleteColorHandler} name=\"colors\"/>\n        <TableData array={sizes} deleteHandler={deleteSizeHandler} name=\"sizes\"/>\n        <TableData array={brands} deleteHandler={deleteBrandHandler} name=\"brands\"/>\n        <TableData array={categories} deleteHandler={deleteCategoryHandler} name=\"categories\"/>\n       </>\n      )}\n    </>\n  );\n};\n\nexport default SpecListScreen;\n\n\n","/Users/alex/Documents/web/react/store/client/src/components/Table.js",[],"/Users/alex/Documents/web/react/store/client/src/screens/SpecEditScreen.js",[],"/Users/alex/Documents/web/react/store/client/src/components/EditSize.js",["199"],"import React, { useState,useEffect } from \"react\";\nimport {\n\n  Button,\n  Form,\n  Modal,\n} from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {editSize, getSizeDetails} from '../redux/actions/sizeActions';\nimport { SIZE_UPDATE_RESET } from \"../redux/types\";\nconst EditSize = ({id,history}) => {\n\n  const dispatch = useDispatch();\n  const sizeDetails = useSelector((state) => state.sizeDetailsReducer);\n  const { size, loading, error } = sizeDetails;\n\n\n  const sizeUpdate = useSelector((state) => state.sizeUpdateReducer);\n  const { success:successUpdate, error: errorUpdate } = sizeUpdate;\n\n  const [sizeInput, setSizeInput] = useState({size:''});\n\n  const [message, setMessage] = useState(\"\")\n\n\n\nuseEffect(() =>{\n\n    //checks if update product success\n    if(successUpdate){\n  \n     \n        setMessage(\"size updated successfully\")\n        setTimeout(()=>{\n          dispatch({type:SIZE_UPDATE_RESET})\n          history.push('/admin/api/get')\n        },3000)\n\n  \n      \n  }else{\n    if(!size || size._id!==id){\n      dispatch(getSizeDetails(id))\n    }\n    setSizeInput({size:size.size})\n  \n   \n\n  }\n  \n  },[dispatch,id,history,successUpdate,error,errorUpdate])\n\n\n\n  return (\n    <>\n    {successUpdate && <Message \n                variant={successUpdate ? \"success\" : \"danger\"}\n                text={message}\n                 />}\n    {loading ? <Loader/> : (\n        <Modal.Dialog>\n        <Modal.Header>\n          <Modal.Title>Update API specifications</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <FormContainer>\n            <Form>\n              <Form.Group controlId=\"size\" className=\"mt-3\">\n                <Form.Label>Size</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"size e.g S/M/L..\"\n                  value={sizeInput.size}\n                  onChange={(e) =>(setSizeInput({size:e.target.value}))}\n                ></Form.Control>\n              </Form.Group>\n            </Form>\n          </FormContainer>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={()=>history.push('/admin/api/get')}>Go Back</Button>\n          <Button variant=\"primary\" onClick={()=>dispatch(editSize(sizeInput,id))}>Save changes</Button>\n        </Modal.Footer>\n      </Modal.Dialog>\n    )}\n      \n    </>\n  );\n};\n\nexport default EditSize;\n","/Users/alex/Documents/web/react/store/client/src/components/EditBrand.js",["200"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editBrand, getBrandDetails } from \"../redux/actions/brandActions\";\nimport { BRAND_UPDATE_RESET } from \"../redux/types\";\nconst EditBrand = ({ id, history }) => {\n  const dispatch = useDispatch();\n  const brandDetails = useSelector((state) => state.brandDetailsReducer);\n  const { brand, loading, error } = brandDetails;\n\n  const brandUpdate = useSelector((state) => state.brandUpdateReducer);\n  const { success: successUpdate, error: errorUpdate } = brandUpdate;\n\n  const [brandInput, setBrandInput] = useState({ brandName: \"\" });\n\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    //checks if update product success\n    if (successUpdate) {\n      setMessage(\"brand updated successfully\");\n      setTimeout(() => {\n        dispatch({ type: BRAND_UPDATE_RESET });\n        history.push(\"/admin/api/get\");\n      }, 3000);\n    } else {\n      if (!brand || brand._id !== id) {\n        dispatch(getBrandDetails(id));\n      }\n      setBrandInput({ brandName: brand.brandName });\n    }\n  }, [dispatch, id, history, successUpdate, error, errorUpdate]);\n\n\n  return (\n    <>\n      {successUpdate && (\n        <Message\n          variant={successUpdate ? \"success\" : \"danger\"}\n          text={message}\n        />\n      )}\n      {loading ? (\n        <Loader />\n      ) : (\n        <Modal.Dialog>\n          <Modal.Header>\n            <Modal.Title>Update API specifications</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <FormContainer>\n              <Form>\n                <Form.Group controlId=\"brand\" className=\"mt-3\">\n                  <Form.Label>Brand</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Brand\"\n                    value={brandInput.brandName}\n                    onChange={(e) =>\n                      setBrandInput({ brandName: e.target.value })\n                    }\n                  ></Form.Control>\n                </Form.Group>\n              </Form>\n            </FormContainer>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => history.push(\"/admin/api/get\")}\n            >\n              Go Back\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={() => dispatch(editBrand(brandInput, id))}\n            >\n              Save changes\n            </Button>\n          </Modal.Footer>\n        </Modal.Dialog>\n      )}\n    </>\n  );\n};\n\nexport default EditBrand;\n","/Users/alex/Documents/web/react/store/client/src/components/EditColor.js",["201"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editColor, getColorDetails } from \"../redux/actions/colorActions\";\nimport { COLOR_UPDATE_RESET } from \"../redux/types\";\n\nconst EditColor = ({ id, history }) => {\n  const dispatch = useDispatch();\n  const colorDetails = useSelector((state) => state.colorDetailsReducer);\n  const { color, loading, error } = colorDetails;\n\n  const brandUpdate = useSelector((state) => state.colorUpdateReducer);\n  const { success: successUpdate, error: errorUpdate } = brandUpdate;\n\n  const [colorInput, setColorInput] = useState({\n    colorName: \"\",\n    colorHex: \"\",\n  });\n\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    //checks if update product success\n    if (successUpdate) {\n      setMessage(\"color updated successfully\");\n      setTimeout(() => {\n        dispatch({ type: COLOR_UPDATE_RESET });\n        history.push(\"/admin/api/get\");\n      }, 3000);\n    } else {\n      if (!color || color._id !== id) {\n        dispatch(getColorDetails(id));\n      }\n      setColorInput({ colorName: color.colorName, colorHex: color.colorHex });\n    }\n  }, [dispatch, id, history, successUpdate, error, errorUpdate]);\n\n  return (\n    <>\n      {successUpdate && (\n        <Message\n          variant={successUpdate ? \"success\" : \"danger\"}\n          text={message}\n        />\n      )}\n      {loading ? (\n        <Loader />\n      ) : (\n        <Modal.Dialog>\n          <Modal.Header>\n            <Modal.Title>Update API specifications</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <FormContainer>\n              <Form>\n                <Form.Group controlId=\"color\" className=\"mt-3\">\n                  <Form.Label>Color name</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter color name\"\n                    value={colorInput.colorName}\n                    onChange={(e) =>\n                      setColorInput({\n                        colorName: e.target.value,\n                        colorHex: colorInput.colorHex,\n                      })\n                    }\n                  ></Form.Control>\n\n                  <Form.Label>Color Hex value</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter color hex\"\n                    value={colorInput.colorHex}\n                    onChange={(e) =>\n                      setColorInput({\n                        colorName: colorInput.colorName,\n                        colorHex: e.target.value,\n                      })\n                    }\n                  />\n                </Form.Group>\n              </Form>\n            </FormContainer>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => history.push(\"/admin/api/get\")}\n            >\n              Go Back\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={() => dispatch(editColor(colorInput, id))}\n            >\n              Save changes\n            </Button>\n          </Modal.Footer>\n        </Modal.Dialog>\n      )}\n    </>\n  );\n};\n\nexport default EditColor;\n","/Users/alex/Documents/web/react/store/client/src/components/EditCategory.js",["202"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  editCategory,\n  getCategoryDetails,\n} from \"../redux/actions/categoryActions\";\nimport { CATEGORY_UPDATE_RESET } from \"../redux/types\";\n\nconst EditCategory = ({ id, history }) => {\n  const dispatch = useDispatch();\n  const categoryDetails = useSelector((state) => state.categoryDetailsReducer);\n  const { category, loading, error } = categoryDetails;\n\n  const categoryUpdate = useSelector((state) => state.categoryUpdateReducer);\n  const { success: successUpdate, error: errorUpdate } = categoryUpdate;\n\n  const [categoryInput, setCategoryInput] = useState({\n    department: \"\",\n    categoryName: \"\",\n  });\n\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    //checks if update product success\n    if (successUpdate) {\n      setMessage(\"category updated successfully\");\n      setTimeout(() => {\n        dispatch({ type: CATEGORY_UPDATE_RESET });\n        history.push(\"/admin/api/get\");\n      }, 3000);\n    } else {\n      if (!category || category._id !== id) {\n        dispatch(getCategoryDetails(id));\n      }\n      setCategoryInput({\n        categoryName: category.categoryName,\n        department: category.department,\n      });\n    }\n  }, [dispatch, id, history, successUpdate, error, errorUpdate]);\n\n  return (\n    <>\n      {successUpdate && (\n        <Message\n          variant={successUpdate ? \"success\" : \"danger\"}\n          text={message}\n        />\n      )}\n      {loading ? (\n        <Loader />\n      ) : (\n        <Modal.Dialog>\n          <Modal.Header>\n            <Modal.Title>Update API specifications</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <FormContainer>\n              <Form>\n                <Form.Group controlId=\"category\" className=\"mt-3\">\n                  <Form.Label>Category</Form.Label>\n                  <Form.Control\n                    required\n                    type=\"text\"\n                    placeholder=\"department e.g Mens/Womens\"\n                    value={categoryInput.department}\n                    onChange={(e) =>\n                      setCategoryInput({\n                        department: e.target.value,\n                        categoryName: categoryInput.categoryName,\n                      })\n                    }\n                  ></Form.Control>\n\n                  <Form.Control\n                    required\n                    type=\"text\"\n                    placeholder=\"category name e.g Jackets\"\n                    value={categoryInput.categoryName}\n                    onChange={(e) =>\n                      setCategoryInput({\n                        categoryName: e.target.value,\n                        department: categoryInput.department,\n                      })\n                    }\n                  ></Form.Control>\n                </Form.Group>\n              </Form>\n            </FormContainer>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => history.push(\"/admin/api/get\")}\n            >\n              Go Back\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={() => dispatch(editCategory(categoryInput, id))}\n            >\n              Save changes\n            </Button>\n          </Modal.Footer>\n        </Modal.Dialog>\n      )}\n    </>\n  );\n};\n\nexport default EditCategory;\n",{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":4,"column":23,"nodeType":"209","messageId":"210","endLine":4,"endColumn":34},{"ruleId":"207","severity":1,"message":"211","line":6,"column":10,"nodeType":"209","messageId":"210","endLine":6,"endColumn":20},{"ruleId":"207","severity":1,"message":"212","line":11,"column":9,"nodeType":"209","messageId":"210","endLine":11,"endColumn":16},{"ruleId":"207","severity":1,"message":"213","line":12,"column":9,"nodeType":"209","messageId":"210","endLine":12,"endColumn":17},{"ruleId":"207","severity":1,"message":"214","line":2,"column":16,"nodeType":"209","messageId":"210","endLine":2,"endColumn":19},{"ruleId":"207","severity":1,"message":"215","line":32,"column":10,"nodeType":"209","messageId":"210","endLine":32,"endColumn":19},{"ruleId":"207","severity":1,"message":"216","line":32,"column":21,"nodeType":"209","messageId":"210","endLine":32,"endColumn":33},{"ruleId":"207","severity":1,"message":"217","line":41,"column":28,"nodeType":"209","messageId":"210","endLine":41,"endColumn":41},{"ruleId":"207","severity":1,"message":"218","line":44,"column":32,"nodeType":"209","messageId":"210","endLine":44,"endColumn":49},{"ruleId":"207","severity":1,"message":"219","line":47,"column":28,"nodeType":"209","messageId":"210","endLine":47,"endColumn":41},{"ruleId":"207","severity":1,"message":"220","line":50,"column":27,"nodeType":"209","messageId":"210","endLine":50,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":57,"column":6,"nodeType":"223","endLine":57,"endColumn":8,"suggestions":"224"},{"ruleId":"207","severity":1,"message":"217","line":48,"column":28,"nodeType":"209","messageId":"210","endLine":48,"endColumn":41},{"ruleId":"207","severity":1,"message":"218","line":51,"column":32,"nodeType":"209","messageId":"210","endLine":51,"endColumn":49},{"ruleId":"207","severity":1,"message":"219","line":54,"column":28,"nodeType":"209","messageId":"210","endLine":54,"endColumn":41},{"ruleId":"207","severity":1,"message":"220","line":57,"column":27,"nodeType":"209","messageId":"210","endLine":57,"endColumn":39},{"ruleId":"221","severity":1,"message":"225","line":84,"column":7,"nodeType":"223","endLine":84,"endColumn":67,"suggestions":"226"},{"ruleId":"221","severity":1,"message":"222","line":91,"column":8,"nodeType":"223","endLine":91,"endColumn":10,"suggestions":"227"},{"ruleId":"207","severity":1,"message":"228","line":2,"column":24,"nodeType":"209","messageId":"210","endLine":2,"endColumn":27},{"ruleId":"207","severity":1,"message":"214","line":2,"column":29,"nodeType":"209","messageId":"210","endLine":2,"endColumn":32},{"ruleId":"207","severity":1,"message":"229","line":2,"column":34,"nodeType":"209","messageId":"210","endLine":2,"endColumn":47},{"ruleId":"207","severity":1,"message":"230","line":40,"column":47,"nodeType":"209","messageId":"210","endLine":40,"endColumn":63},{"ruleId":"207","severity":1,"message":"231","line":43,"column":46,"nodeType":"209","messageId":"210","endLine":43,"endColumn":61},{"ruleId":"207","severity":1,"message":"232","line":46,"column":47,"nodeType":"209","messageId":"210","endLine":46,"endColumn":63},{"ruleId":"207","severity":1,"message":"233","line":49,"column":50,"nodeType":"209","messageId":"210","endLine":49,"endColumn":69},{"ruleId":"221","severity":1,"message":"234","line":54,"column":5,"nodeType":"223","endLine":54,"endColumn":58,"suggestions":"235"},{"ruleId":"221","severity":1,"message":"236","line":35,"column":6,"nodeType":"223","endLine":35,"endColumn":64,"suggestions":"237"},{"ruleId":"221","severity":1,"message":"238","line":39,"column":6,"nodeType":"223","endLine":39,"endColumn":64,"suggestions":"239"},{"ruleId":"221","severity":1,"message":"240","line":45,"column":6,"nodeType":"223","endLine":45,"endColumn":64,"suggestions":"241"},"no-native-reassign",["242"],"no-negated-in-lhs",["243"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'CART_RESET' is defined but never used.","'history' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'Col' is defined but never used.","'uploading' is assigned a value but never used.","'setUploading' is assigned a value but never used.","'brandsLoading' is assigned a value but never used.","'categoriesLoading' is assigned a value but never used.","'colorsLoading' is assigned a value but never used.","'sizesLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["244"],"React Hook useEffect has a missing dependency: 'product'. Either include it or remove the dependency array.",["245"],["246"],"'Row' is defined but never used.","'FloatingLabel' is defined but never used.","'errorDeleteColor' is assigned a value but never used.","'errorDeleteSize' is assigned a value but never used.","'errorDeleteBrand' is assigned a value but never used.","'errorDeleteCategory' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'size'. Either include it or remove the dependency array.",["247"],"React Hook useEffect has a missing dependency: 'brand'. Either include it or remove the dependency array.",["248"],"React Hook useEffect has a missing dependency: 'color'. Either include it or remove the dependency array.",["249"],"React Hook useEffect has a missing dependency: 'category'. Either include it or remove the dependency array.",["250"],"no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"251","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},"Update the dependencies array to be: [dispatch]",{"range":"264","text":"265"},"Update the dependencies array to be: [dispatch, productID, history, successUpdate, error, errorUpdate, product]",{"range":"266","text":"267"},{"range":"268","text":"265"},"Update the dependencies array to be: [dispatch, id, history, successUpdate, error, errorUpdate, size]",{"range":"269","text":"270"},"Update the dependencies array to be: [dispatch, id, history, successUpdate, error, errorUpdate, brand]",{"range":"271","text":"272"},"Update the dependencies array to be: [dispatch, id, history, successUpdate, error, errorUpdate, color]",{"range":"273","text":"274"},"Update the dependencies array to be: [dispatch, id, history, successUpdate, error, errorUpdate, category]",{"range":"275","text":"276"},[2127,2129],"[dispatch]",[2731,2791],"[dispatch, productID, history, successUpdate, error, errorUpdate, product]",[2942,2944],[1288,1341],"[dispatch, id, history, successUpdate, error, errorUpdate, size]",[1320,1378],"[dispatch, id, history, successUpdate, error, errorUpdate, brand]",[1372,1430],"[dispatch, id, history, successUpdate, error, errorUpdate, color]",[1481,1539],"[dispatch, id, history, successUpdate, error, errorUpdate, category]"]