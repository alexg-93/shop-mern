{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/web/react/store/client/src/components/EditBrand.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editBrand, getBrandDetails } from '../redux/actions/brandActions';\nimport { BRAND_UPDATE_RESET } from \"../redux/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditBrand = _ref => {\n  _s();\n\n  let {\n    id,\n    history\n  } = _ref;\n  const dispatch = useDispatch();\n  const brandDetails = useSelector(state => state.brandDetailsReducer);\n  const {\n    brand,\n    loading,\n    error\n  } = brandDetails;\n  console.log('brand', brand);\n  const brandUpdate = useSelector(state => state.brandUpdateReducer);\n  const {\n    success: successUpdate,\n    error: errorUpdate\n  } = brandUpdate;\n  const [brandInput, setBrandInput] = useState({\n    brandName: ''\n  });\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    //checks if update product success\n    if (successUpdate) {\n      setMessage(\"size updated successfully\");\n      setTimeout(() => {\n        dispatch({\n          type: BRAND_UPDATE_RESET\n        });\n        history.push('/admin/api/get');\n      }, 3000);\n    } else {\n      if (!brand || brand._id !== id) {\n        dispatch(getBrandDetails(id));\n      }\n\n      setBrandInput({\n        brand: brand.brandName\n      });\n    }\n  }, [dispatch, id, history, successUpdate, error, errorUpdate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [successUpdate && /*#__PURE__*/_jsxDEV(Message, {\n      variant: successUpdate ? \"success\" : \"danger\",\n      text: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 23\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(Modal.Dialog, {\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Update API specifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(FormContainer, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"size\",\n              className: \"mt-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Size\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"size e.g S/M/L..\",\n                value: brandInput.brandName,\n                onChange: e => setBrandInput({\n                  brandName: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => history.push('/admin/api/get'),\n          children: \"Go Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => dispatch(editBrand(brandInput, id)),\n          children: \"Save changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EditBrand, \"e9dPvKoxZPLO6H+QiXaZndd4dko=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = EditBrand;\nexport default EditBrand;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditBrand\");","map":{"version":3,"sources":["/Users/alex/Documents/web/react/store/client/src/components/EditBrand.js"],"names":["React","useState","useEffect","Button","Form","Modal","FormContainer","Message","Loader","useDispatch","useSelector","editBrand","getBrandDetails","BRAND_UPDATE_RESET","EditBrand","id","history","dispatch","brandDetails","state","brandDetailsReducer","brand","loading","error","console","log","brandUpdate","brandUpdateReducer","success","successUpdate","errorUpdate","brandInput","setBrandInput","brandName","message","setMessage","setTimeout","type","push","_id","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport {\n\n  Button,\n  Form,\n  Modal,\n} from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {editBrand, getBrandDetails} from '../redux/actions/brandActions';\nimport { BRAND_UPDATE_RESET } from \"../redux/types\";\nconst EditBrand = ({id,history}) => {\n\n  const dispatch = useDispatch();\n  const brandDetails = useSelector((state) => state.brandDetailsReducer);\n  const {brand, loading, error } = brandDetails;\n\n  console.log('brand',brand)\n\n  const brandUpdate = useSelector((state) => state.brandUpdateReducer);\n  const { success:successUpdate, error: errorUpdate } = brandUpdate;\n\n  const [brandInput, setBrandInput] = useState({brandName:''});\n\n  const [message, setMessage] = useState(\"\")\n\n\n\nuseEffect(() =>{\n\n    //checks if update product success\n    if(successUpdate){\n  \n     \n        setMessage(\"size updated successfully\")\n        setTimeout(()=>{\n          dispatch({type:BRAND_UPDATE_RESET})\n          history.push('/admin/api/get')\n        },3000)\n\n  \n      \n  }else{\n    if(!brand || brand._id!==id){\n      dispatch(getBrandDetails(id))\n    }\n    setBrandInput({brand:brand.brandName})\n  \n   \n\n  }\n  \n  },[dispatch,id,history,successUpdate,error,errorUpdate])\n\n\n\n  return (\n    <>\n    {successUpdate && <Message \n                variant={successUpdate ? \"success\" : \"danger\"}\n                text={message}\n                 />}\n    {loading ? <Loader/> : (\n        <Modal.Dialog>\n        <Modal.Header>\n          <Modal.Title>Update API specifications</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <FormContainer>\n            <Form>\n              <Form.Group controlId=\"size\" className=\"mt-3\">\n                <Form.Label>Size</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"size e.g S/M/L..\"\n                  value={brandInput.brandName}\n                  onChange={(e) =>(setBrandInput({brandName:e.target.value}))}\n                ></Form.Control>\n              </Form.Group>\n            </Form>\n          </FormContainer>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={()=>history.push('/admin/api/get')}>Go Back</Button>\n          <Button variant=\"primary\" onClick={()=>dispatch(editBrand(brandInput,id))}>Save changes</Button>\n        </Modal.Footer>\n      </Modal.Dialog>\n    )}\n      \n    </>\n  );\n};\n\nexport default EditBrand;\n"]},"metadata":{},"sourceType":"module"}