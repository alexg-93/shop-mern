{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/web/react/store/client/src/components/EditSize.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editSize, getSizeDetails } from '../redux/actions/sizeActions';\nimport { SIZE_UPDATE_RESET } from \"../redux/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditSize = _ref => {\n  _s();\n\n  let {\n    id,\n    history\n  } = _ref;\n  const dispatch = useDispatch();\n  const sizeDetails = useSelector(state => state.sizeDetailsReducer);\n  const {\n    size: sizeInfo,\n    loading,\n    error\n  } = sizeDetails;\n  const sizeUpdate = useSelector(state => state.sizeUpdateReducer);\n  const {\n    success,\n    error: errorUpdate\n  } = sizeUpdate;\n  const [size, setSize] = useState({\n    size: \"\"\n  });\n  const [message, setMessage] = useState(\"Error\");\n  useEffect(() => {\n    dispatch(getSizeDetails(id));\n\n    if (sizeInfo) {\n      setSize(sizeInfo);\n    } //checks if update product success\n\n\n    if (success) {\n      setMessage(\"size updated successfully\");\n      setTimeout(() => {\n        dispatch({\n          type: SIZE_UPDATE_RESET\n        });\n        history.push('/admin/api/get');\n      }, 3000);\n    }\n  }, [dispatch, id, success]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [successUpdate && /*#__PURE__*/_jsxDEV(Message, {\n      variant: successUpdate ? \"success\" : \"danger\",\n      text: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 23\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(Modal.Dialog, {\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Update API specifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(FormContainer, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"size\",\n              className: \"mt-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Size\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"size e.g S/M/L..\",\n                value: sizeInfo.size,\n                onChange: e => setSize({\n                  size: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          children: \"Go Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => dispatch(editSize(size)),\n          children: \"Save changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EditSize, \"YIgQl2Vm1XKMvCJMt4QgxL7ADLw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = EditSize;\nexport default EditSize;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditSize\");","map":{"version":3,"sources":["/Users/alex/Documents/web/react/store/client/src/components/EditSize.js"],"names":["React","useState","useEffect","Button","Form","Modal","FormContainer","Message","Loader","useDispatch","useSelector","editSize","getSizeDetails","SIZE_UPDATE_RESET","EditSize","id","history","dispatch","sizeDetails","state","sizeDetailsReducer","size","sizeInfo","loading","error","sizeUpdate","sizeUpdateReducer","success","errorUpdate","setSize","message","setMessage","setTimeout","type","push","successUpdate","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport {\n\n  Button,\n  Form,\n  Modal,\n} from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {editSize, getSizeDetails} from '../redux/actions/sizeActions';\nimport { SIZE_UPDATE_RESET } from \"../redux/types\";\nconst EditSize = ({id,history}) => {\n\n  const dispatch = useDispatch();\n  const sizeDetails = useSelector((state) => state.sizeDetailsReducer);\n  const { size: sizeInfo, loading, error } = sizeDetails;\n\n  const sizeUpdate = useSelector((state) => state.sizeUpdateReducer);\n  const { success, error: errorUpdate } = sizeUpdate;\n\n  const [size, setSize] = useState({\n    size: \"\",\n  });\n  const [message, setMessage] = useState(\"Error\")\n\n \n  useEffect(() => {\n     dispatch(getSizeDetails(id));  \n     if(sizeInfo){\n        setSize(sizeInfo);\n     }\n     //checks if update product success\n     if(success){\n    \n        setMessage(\"size updated successfully\")\n        setTimeout(()=>{\n          dispatch({type:SIZE_UPDATE_RESET})\n          history.push('/admin/api/get')\n        },3000)\n     }\n  \n   \n  },[dispatch,id,success]);\n\n\n\n  return (\n    <>\n    {successUpdate && <Message \n                variant={successUpdate ? \"success\" : \"danger\"}\n                text={message}\n                 />}\n    {loading ? <Loader/> : (\n        <Modal.Dialog>\n        <Modal.Header>\n          <Modal.Title>Update API specifications</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <FormContainer>\n            <Form>\n              <Form.Group controlId=\"size\" className=\"mt-3\">\n                <Form.Label>Size</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"size e.g S/M/L..\"\n                  value={sizeInfo.size}\n                  onChange={(e) => setSize({ size: e.target.value })}\n                ></Form.Control>\n              </Form.Group>\n            </Form>\n          </FormContainer>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\">Go Back</Button>\n          <Button variant=\"primary\" onClick={()=>dispatch(editSize(size))}>Save changes</Button>\n        </Modal.Footer>\n      </Modal.Dialog>\n    )}\n      \n    </>\n  );\n};\n\nexport default EditSize;\n"]},"metadata":{},"sourceType":"module"}