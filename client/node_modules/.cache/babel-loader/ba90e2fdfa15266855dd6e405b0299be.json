{"ast":null,"code":"import { BRAND_LIST_REQUEST, BRAND_LIST_SUCCESS, BRAND_LIST_FAIL, BRAND_DETAILS_REQUEST, BRAND_DETAILS_SUCCESS, BRAND_DETAILS_FAIL, BRAND_DELETE_REQUEST, BRAND_DELETE_SUCCESS, BRAND_DELETE_FAIL, BRAND_CREATE_REQUEST, BRAND_CREATE_SUCCESS, BRAND_CREATE_FAIL, BRAND_UPDATE_REQUEST, BRAND_UPDATE_SUCCESS, BRAND_UPDATE_FAIL } from \"../types\";\nimport axios from \"axios\";\nexport const getBrands = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BRAND_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/brands`);\n    const {\n      brands\n    } = data;\n    dispatch({\n      type: BRAND_LIST_SUCCESS,\n      payload: brands\n    });\n  } catch (error) {\n    dispatch({\n      type: BRAND_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getBrandDetails = id => async dispatch => {\n  dispatch({\n    type: BRAND_DETAILS_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await axios.get(`/api/brands/${id}`);\n    const {\n      brand\n    } = data;\n    console.log(brand);\n\n    if (brand) {\n      dispatch({\n        type: BRAND_DETAILS_SUCCESS,\n        payload: brand\n      });\n    } else {\n      dispatch({\n        type: BRAND_DETAILS_FAIL,\n        payload: `Error : ${data.message} statusCode ${data.statusCode}`\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: BRAND_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteBrand = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BRAND_DELETE_REQUEST\n    });\n    const config = {\n      headers: {\n        Authorization: \"\"\n      }\n    };\n    await axios.delete(`/api/brands/${id}`, config);\n    dispatch({\n      type: BRAND_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: BRAND_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createBrand = newBrand => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BRAND_CREATE_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/brands`, newBrand, config);\n    dispatch({\n      type: BRAND_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BRAND_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const editBrand = currentBrand => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BRAND_UPDATE_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/brands/${currentBrand._id}`, currentBrand, config);\n\n    if (data) {\n      dispatch({\n        type: BRAND_UPDATE_SUCCESS\n      });\n      dispatch({\n        type: BRAND_DETAILS_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: BRAND_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/alex/Documents/web/react/store/client/src/redux/actions/brandActions.js"],"names":["BRAND_LIST_REQUEST","BRAND_LIST_SUCCESS","BRAND_LIST_FAIL","BRAND_DETAILS_REQUEST","BRAND_DETAILS_SUCCESS","BRAND_DETAILS_FAIL","BRAND_DELETE_REQUEST","BRAND_DELETE_SUCCESS","BRAND_DELETE_FAIL","BRAND_CREATE_REQUEST","BRAND_CREATE_SUCCESS","BRAND_CREATE_FAIL","BRAND_UPDATE_REQUEST","BRAND_UPDATE_SUCCESS","BRAND_UPDATE_FAIL","axios","getBrands","dispatch","getState","type","data","get","brands","payload","error","response","message","getBrandDetails","id","brand","console","log","statusCode","deleteBrand","config","headers","Authorization","delete","createBrand","newBrand","post","editBrand","currentBrand","put","_id"],"mappings":"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","sourcesContent":["import {\n    BRAND_LIST_REQUEST,\n    BRAND_LIST_SUCCESS,\n    BRAND_LIST_FAIL,\n  \n    BRAND_DETAILS_REQUEST,\n    BRAND_DETAILS_SUCCESS,\n    BRAND_DETAILS_FAIL,\n  \n    BRAND_DELETE_REQUEST,\n    BRAND_DELETE_SUCCESS,\n    BRAND_DELETE_FAIL,\n  \n    BRAND_CREATE_REQUEST,\n    BRAND_CREATE_SUCCESS,\n    BRAND_CREATE_FAIL,\n  \n    BRAND_UPDATE_REQUEST,\n    BRAND_UPDATE_SUCCESS,\n    BRAND_UPDATE_FAIL,\n  \n  } from \"../types\";\n  import axios from \"axios\";\n  \n  \n  \n  export const getBrands = () => async (dispatch,getState) => {\n    \n      try {\n         \n              dispatch({type: BRAND_LIST_REQUEST})\n              const { data } = await axios.get(`/api/brands`);\n              const {brands} = data\n           \n              dispatch({\n                type: BRAND_LIST_SUCCESS,\n                payload: brands\n               \n              });\n          \n    } catch (error) {\n        dispatch({\n            type:BRAND_LIST_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\n        })\n    }\n  };\n  \n  export const getBrandDetails = (id) => async(dispatch)=>{\n      dispatch({type: BRAND_DETAILS_REQUEST})\n      try {\n  \n          const { data } = await axios.get(`/api/brands/${id}`);\n          const {brand} = data\n\n           console.log(brand)\n          if(brand){\n\n              dispatch({\n                  type: BRAND_DETAILS_SUCCESS,\n                  payload: brand\n                });\n              \n          }else{\n              dispatch({\n                  type:BRAND_DETAILS_FAIL,\n                  payload:`Error : ${data.message} statusCode ${data.statusCode}`\n              })\n          }\n        } catch (error) {\n            dispatch({\n                type:BRAND_DETAILS_FAIL,\n                payload: error.response && error.response.data.message ? error.response.data.message : error.message\n            })\n        }\n  }\n  \n  export const deleteBrand = (id) => async (dispatch,getState) => {\n      try {\n        dispatch({\n          type: BRAND_DELETE_REQUEST\n        });\n    \n        const config = {\n            headers: {\n              Authorization:\"\"\n            },\n          };\n      \n          await axios.delete(`/api/brands/${id}`,config);\n        \n            dispatch({\n              type: BRAND_DELETE_SUCCESS\n            });\n    \n           \n      } catch (error) {\n        dispatch({\n            type: BRAND_DELETE_FAIL,\n            payload:\n              error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message,\n          });\n      }\n    };\n  \n  \n    export const createBrand = (newBrand) => async (dispatch,getState) => {\n      try {\n        dispatch({\n          type: BRAND_CREATE_REQUEST\n        });\n    \n      \n        const config = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization:\"\"\n            },\n          };\n    \n          const { data } = await axios.post(\n            `/api/brands`,newBrand,\n            config\n          );\n          \n            dispatch({\n              type: BRAND_CREATE_SUCCESS,\n              payload: data,\n            });\n     \n      } catch (error) {\n        dispatch({\n            type: BRAND_CREATE_FAIL,\n            payload:\n              error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message,\n          });\n      }\n    };\n  \n  \n  export const editBrand = (currentBrand) => async (dispatch,getState) => {\n    try {\n      dispatch({\n        type: BRAND_UPDATE_REQUEST\n      });\n  \n  \n      const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization:\"\"\n          },\n        };\n  \n      const {data} = await axios.put(`/api/brands/${currentBrand._id}`,currentBrand,config);\n   \n        if(data){\n          dispatch({\n            type: BRAND_UPDATE_SUCCESS,\n          });\n          dispatch({\n            type: BRAND_DETAILS_SUCCESS,\n            payload:data\n          });\n   \n        }\n  \n    } catch (error) {\n      dispatch({\n          type: BRAND_UPDATE_FAIL,\n          payload:\n            error.response && error.response.data.message\n              ? error.response.data.message\n              : error.message,\n        });\n    }\n  };\n  "]},"metadata":{},"sourceType":"module"}