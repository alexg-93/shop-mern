{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/web/react/store/client/src/components/EditCategory.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editCategory, getCategoryDetails } from \"../redux/actions/colorActions\";\nimport { COLOR_UPDATE_RESET } from \"../redux/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditCategory = _ref => {\n  _s();\n\n  let {\n    id,\n    history\n  } = _ref;\n  const dispatch = useDispatch();\n  const colorDetails = useSelector(state => state.colorDetailsReducer);\n  const {\n    color,\n    loading,\n    error\n  } = colorDetails;\n  const brandUpdate = useSelector(state => state.colorUpdateReducer);\n  const {\n    success: successUpdate,\n    error: errorUpdate\n  } = brandUpdate;\n  const [colorInput, setColorInput] = useState({\n    colorName: \"\",\n    colorHex: \"\"\n  });\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    //checks if update product success\n    if (successUpdate) {\n      setMessage(\"color updated successfully\");\n      setTimeout(() => {\n        dispatch({\n          type: COLOR_UPDATE_RESET\n        });\n        history.push(\"/admin/api/get\");\n      }, 3000);\n    } else {\n      if (!color || color._id !== id) {\n        dispatch(getColorDetails(id));\n      }\n\n      setColorInput({\n        colorName: color.colorName,\n        colorHex: color.colorHex\n      });\n    }\n  }, [dispatch, id, history, successUpdate, error, errorUpdate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [successUpdate && /*#__PURE__*/_jsxDEV(Message, {\n      variant: successUpdate ? \"success\" : \"danger\",\n      text: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Modal.Dialog, {\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Update API specifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(FormContainer, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"color\",\n              className: \"mt-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Color name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"Enter color name\",\n                value: colorInput.colorName,\n                onChange: e => setColorInput({\n                  colorName: e.target.value,\n                  colorHex: colorInput.colorHex\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Color Hex value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"Enter color hex\",\n                value: colorInput.colorHex,\n                onChange: e => setColorInput({\n                  colorName: colorInput.colorName,\n                  colorHex: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => history.push(\"/admin/api/get\"),\n          children: \"Go Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => dispatch(editColor(colorInput, id)),\n          children: \"Save changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EditCategory, \"RxqbgvrlWLDTkRV6wMFqSJsAc/U=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = EditCategory;\nexport default EditCategory;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCategory\");","map":{"version":3,"sources":["/Users/alex/Documents/web/react/store/client/src/components/EditCategory.js"],"names":["React","useState","useEffect","Button","Form","Modal","FormContainer","Message","Loader","useDispatch","useSelector","editCategory","getCategoryDetails","COLOR_UPDATE_RESET","EditCategory","id","history","dispatch","colorDetails","state","colorDetailsReducer","color","loading","error","brandUpdate","colorUpdateReducer","success","successUpdate","errorUpdate","colorInput","setColorInput","colorName","colorHex","message","setMessage","setTimeout","type","push","_id","getColorDetails","e","target","value","editColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editCategory, getCategoryDetails } from \"../redux/actions/colorActions\";\nimport { COLOR_UPDATE_RESET } from \"../redux/types\";\n\nconst EditCategory = ({ id, history }) => {\n\n  const dispatch = useDispatch();\n  const colorDetails = useSelector((state) => state.colorDetailsReducer);\n  const { color, loading, error } = colorDetails;\n\n  const brandUpdate = useSelector((state) => state.colorUpdateReducer);\n  const { success: successUpdate, error: errorUpdate } = brandUpdate;\n\n  const [colorInput, setColorInput] = useState({\n    colorName: \"\",\n    colorHex: \"\",\n  });\n\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    //checks if update product success\n    if (successUpdate) {\n      setMessage(\"color updated successfully\");\n      setTimeout(() => {\n        dispatch({ type: COLOR_UPDATE_RESET });\n        history.push(\"/admin/api/get\");\n      }, 3000);\n    } else {\n      if (!color || color._id !== id) {\n        dispatch(getColorDetails(id));\n      }\n      setColorInput({ colorName: color.colorName, colorHex: color.colorHex });\n    }\n  }, [dispatch, id, history, successUpdate, error, errorUpdate]);\n\n  return (\n    <>\n      {successUpdate && (\n        <Message\n          variant={successUpdate ? \"success\" : \"danger\"}\n          text={message}\n        />\n      )}\n      {loading ? (\n        <Loader />\n      ) : (\n        <Modal.Dialog>\n          <Modal.Header>\n            <Modal.Title>Update API specifications</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <FormContainer>\n              <Form>\n                <Form.Group controlId=\"color\" className=\"mt-3\">\n                  <Form.Label>Color name</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter color name\"\n                    value={colorInput.colorName}\n                    onChange={(e) =>\n                      setColorInput({\n                        colorName: e.target.value,\n                        colorHex: colorInput.colorHex,\n                      })\n                    }\n                  ></Form.Control>\n\n                  <Form.Label>Color Hex value</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter color hex\"\n                    value={colorInput.colorHex}\n                    onChange={(e) =>\n                      setColorInput({\n                        colorName: colorInput.colorName,\n                        colorHex: e.target.value,\n                      })\n                    }\n                  />\n                </Form.Group>\n              </Form>\n            </FormContainer>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => history.push(\"/admin/api/get\")}\n            >\n              Go Back\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={() => dispatch(editColor(colorInput, id))}\n            >\n              Save changes\n            </Button>\n          </Modal.Footer>\n        </Modal.Dialog>\n      )}\n    </>\n  );\n};\n\nexport default EditCategory;\n"]},"metadata":{},"sourceType":"module"}