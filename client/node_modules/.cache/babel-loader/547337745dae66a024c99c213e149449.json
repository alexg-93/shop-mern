{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/web/react/store/client/src/components/EditSize.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editSize, getSizeDetails } from '../redux/actions/sizeActions';\nimport { SIZE_UPDATE_RESET } from \"../redux/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditSize = _ref => {\n  _s();\n\n  let {\n    id,\n    history\n  } = _ref;\n  const dispatch = useDispatch();\n  const sizeDetails = useSelector(state => state.sizeDetailsReducer);\n  const {\n    size,\n    loading,\n    error\n  } = sizeDetails;\n  const sizeUpdate = useSelector(state => state.sizeUpdateReducer);\n  const {\n    success: successUpdate,\n    error: errorUpdate\n  } = sizeUpdate;\n  const [sizeInput, setSizeInput] = useState({\n    size: ''\n  });\n  const [message, setMessage] = useState(\"\"); //   useEffect(() => {\n  //     dispatch(getSizeDetails(id));\n  //     if(size){\n  //       setSizeInput({size:size.size})\n  //     }\n  //   } ,[dispatch,id]);\n  //   useEffect(() => {\n  //      //checks if update product success\n  //      if(successUpdate){\n  //         setMessage(\"size updated successfully\")\n  //         setTimeout(()=>{\n  //           dispatch({type:SIZE_UPDATE_RESET})\n  //           history.push('/admin/api/get')\n  //         },3000)\n  //      }\n  //   },[dispatch,successUpdate,history]);\n\n  useEffect(() => {\n    //checks if update product success\n    if (successUpdate) {//         setMessage(\"size updated successfully\")\n      //         setTimeout(()=>{\n      //           dispatch({type:SIZE_UPDATE_RESET})\n      //           history.push('/admin/api/get')\n      //         },3000)\n    } else {\n      if (!product || product._id !== productID) {\n        dispatch(listProductDetails(productID));\n      }\n\n      setTitle(product.title);\n      setPrice(product.price);\n      setQuantity(product.quantity);\n      setImage(product.image);\n      setDescription(product.description);\n    }\n  }, [dispatch, productID, history, successUpdate, error, errorUpdate]);\n  useEffect(() => {\n    dispatch(getBrands());\n    dispatch(getColors());\n    dispatch(getCategories());\n    dispatch(getSizes());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [successUpdate && /*#__PURE__*/_jsxDEV(Message, {\n      variant: successUpdate ? \"success\" : \"danger\",\n      text: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(Modal.Dialog, {\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Update API specifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(FormContainer, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"size\",\n              className: \"mt-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Size\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"size e.g S/M/L..\",\n                value: sizeInput,\n                onChange: e => setSizeInput({\n                  size: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          children: \"Go Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => dispatch(editSize(size, id)),\n          children: \"Save changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EditSize, \"4+IsAKx7ij6igZVYxEUGCs2J+98=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = EditSize;\nexport default EditSize;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditSize\");","map":{"version":3,"sources":["/Users/alex/Documents/web/react/store/client/src/components/EditSize.js"],"names":["React","useState","useEffect","Button","Form","Modal","FormContainer","Message","Loader","useDispatch","useSelector","editSize","getSizeDetails","SIZE_UPDATE_RESET","EditSize","id","history","dispatch","sizeDetails","state","sizeDetailsReducer","size","loading","error","sizeUpdate","sizeUpdateReducer","success","successUpdate","errorUpdate","sizeInput","setSizeInput","message","setMessage","product","_id","productID","listProductDetails","setTitle","title","setPrice","price","setQuantity","quantity","setImage","image","setDescription","description","getBrands","getColors","getCategories","getSizes","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport {\n\n  Button,\n  Form,\n  Modal,\n} from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {editSize, getSizeDetails} from '../redux/actions/sizeActions';\nimport { SIZE_UPDATE_RESET } from \"../redux/types\";\nconst EditSize = ({id,history}) => {\n\n  const dispatch = useDispatch();\n  const sizeDetails = useSelector((state) => state.sizeDetailsReducer);\n  const { size, loading, error } = sizeDetails;\n\n\n  const sizeUpdate = useSelector((state) => state.sizeUpdateReducer);\n  const { success:successUpdate, error: errorUpdate } = sizeUpdate;\n\n  const [sizeInput, setSizeInput] = useState({size:''});\n\n  const [message, setMessage] = useState(\"\")\n\n \n//   useEffect(() => {\n//     dispatch(getSizeDetails(id));\n//     if(size){\n//       setSizeInput({size:size.size})\n//     }\n//   } ,[dispatch,id]);\n\n\n//   useEffect(() => {\n    \n//      //checks if update product success\n//      if(successUpdate){\n    \n//         setMessage(\"size updated successfully\")\n//         setTimeout(()=>{\n//           dispatch({type:SIZE_UPDATE_RESET})\n//           history.push('/admin/api/get')\n//         },3000)\n\n//      }\n\n   \n//   },[dispatch,successUpdate,history]);\n\nuseEffect(() =>{\n\n    //checks if update product success\n    if(successUpdate){\n  \n     \n//         setMessage(\"size updated successfully\")\n//         setTimeout(()=>{\n//           dispatch({type:SIZE_UPDATE_RESET})\n//           history.push('/admin/api/get')\n//         },3000)\n\n  \n      \n  }else{\n    if(!product || product._id!==productID){\n      dispatch(listProductDetails(productID))\n    }\n    setTitle(product.title)\n    setPrice(product.price)\n    setQuantity(product.quantity)\n    setImage(product.image)\n    setDescription(product.description)\n   \n\n  }\n  \n  },[dispatch,productID,history,successUpdate,error,errorUpdate])\n\n  useEffect(() => {\n    dispatch(getBrands());\n    dispatch(getColors());\n    dispatch(getCategories());\n    dispatch(getSizes());\n  }, []);\n\n\n  return (\n    <>\n    {successUpdate && <Message \n                variant={successUpdate ? \"success\" : \"danger\"}\n                text={message}\n                 />}\n    {loading ? <Loader/> : (\n        <Modal.Dialog>\n        <Modal.Header>\n          <Modal.Title>Update API specifications</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <FormContainer>\n            <Form>\n              <Form.Group controlId=\"size\" className=\"mt-3\">\n                <Form.Label>Size</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"size e.g S/M/L..\"\n                  value={sizeInput}\n                  onChange={(e) =>(setSizeInput({size:e.target.value}))}\n                ></Form.Control>\n              </Form.Group>\n            </Form>\n          </FormContainer>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\">Go Back</Button>\n          <Button variant=\"primary\" onClick={()=>dispatch(editSize(size,id))}>Save changes</Button>\n        </Modal.Footer>\n      </Modal.Dialog>\n    )}\n      \n    </>\n  );\n};\n\nexport default EditSize;\n"]},"metadata":{},"sourceType":"module"}