{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { productListReducer, productDetailsReducer, productDeleteReducer, productCreateReducer, productUpdateReducer, productCreateReviewReducer, productTopRatedReducer, productSortReducer } from \"../redux/reducers/productReducers.js\";\nimport { cartReducer } from \"../redux/reducers/cartReducers.js\";\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, usersListReducer, userDeleteReducer, AdminUpdateUserReducer } from \"../redux/reducers/userReducers.js\";\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, myOrdersReducer, orderListReducer, orderDeliverReducer } from \"./reducers/orderReducers\";\nimport { filterReducer } from \"./reducers/filterReducers.js\";\nconst reducer = combineReducers({\n  productListReducer,\n  productDetails: productDetailsReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productTopRatedReducer,\n  productUpdateReducer,\n  productCreateReviewReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  updateUser: AdminUpdateUserReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderDeliverReducer,\n  orderListReducer,\n  myOrders: myOrdersReducer,\n  usersList: usersListReducer,\n  userDelete: userDeleteReducer,\n  filterReducer\n});\nconst cartItemFromLocalStorage = localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [];\nconst userInfoFromLocalStorage = localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null;\nconst shippingAddressFromLocalStorage = localStorage.getItem(\"shippingAddress\") ? JSON.parse(localStorage.getItem(\"shippingAddress\")) : {};\nconst paymentMethodFromLocalStorage = localStorage.getItem(\"paymentMethod\") ? JSON.parse(localStorage.getItem(\"paymentMethod\")) : null;\nconst initialState = {\n  cart: {\n    cartItems: cartItemFromLocalStorage,\n    shippingAddress: shippingAddressFromLocalStorage,\n    paymentMethod: paymentMethodFromLocalStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromLocalStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/alex/Documents/web/react/store/client/src/redux/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","productDeleteReducer","productCreateReducer","productUpdateReducer","productCreateReviewReducer","productTopRatedReducer","productSortReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","usersListReducer","userDeleteReducer","AdminUpdateUserReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","myOrdersReducer","orderListReducer","orderDeliverReducer","filterReducer","reducer","productDetails","productDelete","productCreate","cart","userLogin","userRegister","userDetails","userUpdateProfile","updateUser","orderCreate","orderDetails","orderPay","myOrders","usersList","userDelete","cartItemFromLocalStorage","localStorage","getItem","JSON","parse","userInfoFromLocalStorage","shippingAddressFromLocalStorage","paymentMethodFromLocalStorage","initialState","cartItems","shippingAddress","paymentMethod","userInfo","middleware","store"],"mappings":"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","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport {\n  productListReducer,\n  productDetailsReducer,\n  productDeleteReducer,\n  productCreateReducer,\n  productUpdateReducer ,\n  productCreateReviewReducer,\n  productTopRatedReducer,\n  productSortReducer\n} from \"../redux/reducers/productReducers.js\";\n\nimport { cartReducer } from \"../redux/reducers/cartReducers.js\";\n\nimport {\n  userLoginReducer,\n  userRegisterReducer,\n  userDetailsReducer,\n  userUpdateProfileReducer,\n  usersListReducer,\n  userDeleteReducer,\n  AdminUpdateUserReducer\n} from \"../redux/reducers/userReducers.js\";\n\nimport {\n  orderCreateReducer,\n  orderDetailsReducer,\n  orderPayReducer,\n  myOrdersReducer,\n  orderListReducer,\n  orderDeliverReducer\n} from \"./reducers/orderReducers\";\n\nimport { filterReducer } from \"./reducers/filterReducers.js\";\n\n\nconst reducer = combineReducers({\n  productListReducer,\n  productDetails: productDetailsReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productTopRatedReducer,\n  productUpdateReducer ,\n  productCreateReviewReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  updateUser: AdminUpdateUserReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderDeliverReducer,\n  orderListReducer,\n  myOrders: myOrdersReducer,\n  usersList: usersListReducer,\n  userDelete: userDeleteReducer,\n\n  filterReducer,\n\n});\n\nconst cartItemFromLocalStorage = localStorage.getItem(\"cartItems\")\n  ? JSON.parse(localStorage.getItem(\"cartItems\"))\n  : [];\n\nconst userInfoFromLocalStorage = localStorage.getItem(\"userInfo\")\n  ? JSON.parse(localStorage.getItem(\"userInfo\"))\n  : null;\n\nconst shippingAddressFromLocalStorage = localStorage.getItem(\"shippingAddress\")\n  ? JSON.parse(localStorage.getItem(\"shippingAddress\"))\n  : {};\n\nconst paymentMethodFromLocalStorage = localStorage.getItem(\"paymentMethod\")\n  ? JSON.parse(localStorage.getItem(\"paymentMethod\"))\n  : null;\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemFromLocalStorage,\n    shippingAddress: shippingAddressFromLocalStorage,\n    paymentMethod: paymentMethodFromLocalStorage,\n  },\n  userLogin: { userInfo: userInfoFromLocalStorage },\n};\nconst middleware = [thunk];\nconst store = createStore(\n  reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}