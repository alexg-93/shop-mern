{"ast":null,"code":"import { SIZE_LIST_REQUEST, SIZE_LIST_SUCCESS, SIZE_LIST_FAIL, SIZE_DETAILS_REQUEST, SIZE_DETAILS_SUCCESS, SIZE_DETAILS_FAIL, SIZE_DELETE_REQUEST, SIZE_DELETE_SUCCESS, SIZE_DELETE_FAIL, SIZE_CREATE_REQUEST, SIZE_CREATE_SUCCESS, SIZE_CREATE_FAIL, SIZE_UPDATE_REQUEST, SIZE_UPDATE_SUCCESS, SIZE_UPDATE_FAIL } from \"../types\";\nimport axios from \"axios\";\nexport const getSizes = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: SIZE_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/sizes`);\n    const {\n      sizes\n    } = data;\n    dispatch({\n      type: SIZE_LIST_SUCCESS,\n      payload: sizes\n    });\n  } catch (error) {\n    dispatch({\n      type: SIZE_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getSizeDetails = id => async dispatch => {\n  dispatch({\n    type: SIZE_DETAILS_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await axios.get(`/api/sizes/${id}`);\n    const {\n      size\n    } = data;\n\n    if (size) {\n      dispatch({\n        type: SIZE_DETAILS_SUCCESS,\n        payload: size\n      });\n    } else {\n      dispatch({\n        type: SIZE_DETAILS_FAIL,\n        payload: `Error : ${data.message} statusCode ${data.statusCode}`\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: SIZE_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteSize = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: SIZE_DELETE_REQUEST\n    });\n    const config = {\n      headers: {\n        Authorization: \"\"\n      }\n    };\n    await axios.delete(`/api/sizes/${id}`, config);\n    dispatch({\n      type: SIZE_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: SIZE_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createSize = newSize => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: SIZE_CREATE_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/sizes`, newSize, config);\n    dispatch({\n      type: SIZE_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SIZE_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const editSize = (currentSize, id) => async (dispatch, getState) => {\n  console.log(currentSize);\n\n  try {\n    dispatch({\n      type: SIZE_UPDATE_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/sizes/${currentSize._id}`, currentSize, config);\n\n    if (data) {\n      dispatch({\n        type: SIZE_UPDATE_SUCCESS\n      });\n      dispatch({\n        type: SIZE_DETAILS_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: SIZE_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/alex/Documents/web/react/store/client/src/redux/actions/sizeActions.js"],"names":["SIZE_LIST_REQUEST","SIZE_LIST_SUCCESS","SIZE_LIST_FAIL","SIZE_DETAILS_REQUEST","SIZE_DETAILS_SUCCESS","SIZE_DETAILS_FAIL","SIZE_DELETE_REQUEST","SIZE_DELETE_SUCCESS","SIZE_DELETE_FAIL","SIZE_CREATE_REQUEST","SIZE_CREATE_SUCCESS","SIZE_CREATE_FAIL","SIZE_UPDATE_REQUEST","SIZE_UPDATE_SUCCESS","SIZE_UPDATE_FAIL","axios","getSizes","dispatch","getState","type","data","get","sizes","payload","error","response","message","getSizeDetails","id","size","statusCode","deleteSize","config","headers","Authorization","delete","createSize","newSize","post","editSize","currentSize","console","log","put","_id"],"mappings":"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","sourcesContent":["import {\n    SIZE_LIST_REQUEST,\n    SIZE_LIST_SUCCESS,\n    SIZE_LIST_FAIL,\n  \n    SIZE_DETAILS_REQUEST,\n    SIZE_DETAILS_SUCCESS,\n    SIZE_DETAILS_FAIL,\n  \n    SIZE_DELETE_REQUEST,\n    SIZE_DELETE_SUCCESS,\n    SIZE_DELETE_FAIL,\n  \n    SIZE_CREATE_REQUEST,\n    SIZE_CREATE_SUCCESS,\n    SIZE_CREATE_FAIL,\n  \n    SIZE_UPDATE_REQUEST,\n    SIZE_UPDATE_SUCCESS,\n    SIZE_UPDATE_FAIL,\n  \n  } from \"../types\";\n  import axios from \"axios\";\n  \n  \n  \n  export const getSizes = () => async (dispatch,getState) => {\n    \n      try {\n         \n              dispatch({type: SIZE_LIST_REQUEST})\n              const { data } = await axios.get(`/api/sizes`);\n              const {sizes} = data\n           \n             \n              dispatch({\n                type: SIZE_LIST_SUCCESS,\n                payload: sizes\n               \n              });\n           \n            \n      \n    } catch (error) {\n        dispatch({\n            type:SIZE_LIST_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\n        })\n    }\n  };\n  \n  export const getSizeDetails = (id) => async(dispatch)=>{\n      dispatch({type: SIZE_DETAILS_REQUEST})\n      try {\n  \n          const { data } = await axios.get(`/api/sizes/${id}`);\n          const {size} = data\n          if(size){\n\n              dispatch({\n                  type: SIZE_DETAILS_SUCCESS,\n                  payload: size\n                });\n              \n          }else{\n              dispatch({\n                  type:SIZE_DETAILS_FAIL,\n                  payload:`Error : ${data.message} statusCode ${data.statusCode}`\n              })\n          }\n        } catch (error) {\n            dispatch({\n                type:SIZE_DETAILS_FAIL,\n                payload: error.response && error.response.data.message ? error.response.data.message : error.message\n            })\n        }\n  }\n  \n  export const deleteSize = (id) => async (dispatch,getState) => {\n      try {\n        dispatch({\n          type: SIZE_DELETE_REQUEST\n        });\n    \n        const config = {\n            headers: {\n              Authorization:\"\"\n            },\n          };\n      \n          await axios.delete(`/api/sizes/${id}`,config);\n        \n            dispatch({\n              type: SIZE_DELETE_SUCCESS\n            });\n    \n           \n      } catch (error) {\n        dispatch({\n            type: SIZE_DELETE_FAIL,\n            payload:\n              error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message,\n          });\n      }\n    };\n  \n  \n    export const createSize = (newSize) => async (dispatch,getState) => {\n      try {\n        dispatch({\n          type: SIZE_CREATE_REQUEST\n        });\n    \n      \n        const config = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization:\"\"\n            },\n          };\n    \n          const { data } = await axios.post(\n            `/api/sizes`,newSize,\n            config\n          );\n          \n            dispatch({\n              type: SIZE_CREATE_SUCCESS,\n              payload: data,\n            });\n     \n      } catch (error) {\n        dispatch({\n            type: SIZE_CREATE_FAIL,\n            payload:\n              error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message,\n          });\n      }\n    };\n  \n  \n  export const editSize = (currentSize,id) => async (dispatch,getState) => {\n\n    console.log(currentSize)\n    try {\n      dispatch({\n        type: SIZE_UPDATE_REQUEST\n      });\n  \n  \n      const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization:\"\"\n          },\n        };\n  \n      const {data} = await axios.put(`/api/sizes/${currentSize._id}`,currentSize,config);\n   \n        if(data){\n          dispatch({\n            type: SIZE_UPDATE_SUCCESS,\n          });\n          dispatch({\n            type: SIZE_DETAILS_SUCCESS,\n            payload:data\n          });\n   \n        }\n  \n    } catch (error) {\n      dispatch({\n          type: SIZE_UPDATE_FAIL,\n          payload:\n            error.response && error.response.data.message\n              ? error.response.data.message\n              : error.message,\n        });\n    }\n  };\n  "]},"metadata":{},"sourceType":"module"}