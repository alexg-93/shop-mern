{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/web/react/store/client/src/screens/UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { getUserDetails, adminUpdateUser } from \"../redux/actions/userActions\";\nimport { USER_UPDATE_RESET } from \"../redux/types\";\nimport FormContainer from \"../components/FormContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserEditScreen = _ref => {\n  _s();\n\n  let {\n    match,\n    history\n  } = _ref;\n  const userID = match.params.id;\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isAdmin, setIsAdmin] = useState(false);\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const updateUser = useSelector(state => state.updateUser);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = updateUser;\n  useEffect(() => {\n    if (!userInfo.isAdmin) {\n      history.push('/');\n    } //checks if update user is success\n\n\n    if (successUpdate) {\n      dispatch({\n        type: USER_UPDATE_RESET\n      });\n      history.push('/admin/users');\n    } else {\n      if (!user || !user.name || user._id !== userID) {\n        dispatch(getUserDetails(userID));\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n        setIsAdmin(user.isAdmin);\n      }\n    }\n  }, [dispatch, userID, history, successUpdate, user, error]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(adminUpdateUser({\n      _id: userID,\n      name,\n      email,\n      isAdmin\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/users\",\n      className: \"btn btn-light my-3\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 26\n      }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        text: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 24\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 19\n      }, this), error && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        text: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Enter name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), user && !user.isAdmin && /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"isadmin\",\n          className: \"mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Admin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            placeholder: \"is Admin\",\n            checked: isAdmin,\n            onChange: e => {\n              setIsAdmin(e.target.checked);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          className: \"mt-3\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserEditScreen, \"65ShzWhm5pyBXssh0s2Z86Oo7vM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = UserEditScreen;\nexport default UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["/Users/alex/Documents/web/react/store/client/src/screens/UserEditScreen.js"],"names":["React","useState","useEffect","Link","Form","Button","useDispatch","useSelector","Message","Loader","getUserDetails","adminUpdateUser","USER_UPDATE_RESET","FormContainer","UserEditScreen","match","history","userID","params","id","name","setName","email","setEmail","isAdmin","setIsAdmin","dispatch","userDetails","state","userLogin","userInfo","loading","error","user","updateUser","loadingUpdate","errorUpdate","success","successUpdate","push","type","_id","submitHandler","e","preventDefault","target","value","checked"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,cAAR,EAAuBC,eAAvB,QAA6C,8BAA7C;AACA,SAASC,iBAAT,QAAiC,gBAAjC;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;;;AAEA,MAAMC,cAAc,GAAG,QAAwB;AAAA;;AAAA,MAAvB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAuB;AAE7C,QAAMC,MAAM,GAAGF,KAAK,CAACG,MAAN,CAAaC,EAA5B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACuB,OAAD,EAAUC,UAAV,IAAwBxB,QAAQ,CAAC,KAAD,CAAtC;AAGA,QAAMyB,QAAQ,GAAGpB,WAAW,EAA5B;AAEA,QAAMqB,WAAW,GAAGpB,WAAW,CAAEqB,KAAD,IAAWA,KAAK,CAACD,WAAlB,CAA/B;AAEA,QAAME,SAAS,GAAGtB,WAAW,CAAEqB,KAAD,IAAWA,KAAK,CAACC,SAAlB,CAA7B;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAeD,SAArB;AAEA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA0BN,WAAhC;AAEA,QAAMO,UAAU,GAAG3B,WAAW,CAAEqB,KAAD,IAAWA,KAAK,CAACM,UAAlB,CAA9B;AAEA,QAAM;AAAEH,IAAAA,OAAO,EAACI,aAAV;AAAyBH,IAAAA,KAAK,EAACI,WAA/B;AAA4CC,IAAAA,OAAO,EAACC;AAApD,MAAsEJ,UAA5E;AAGEhC,EAAAA,SAAS,CAAC,MAAK;AACb,QAAG,CAAC4B,QAAQ,CAACN,OAAb,EAAqB;AACnBR,MAAAA,OAAO,CAACuB,IAAR,CAAa,GAAb;AACD,KAHY,CAIX;;;AACA,QAAGD,aAAH,EAAiB;AACbZ,MAAAA,QAAQ,CAAC;AAACc,QAAAA,IAAI,EAAC5B;AAAN,OAAD,CAAR;AACAI,MAAAA,OAAO,CAACuB,IAAR,CAAa,cAAb;AACH,KAHD,MAGK;AAGC,UAAI,CAACN,IAAD,IAAQ,CAACA,IAAI,CAACb,IAAd,IAAsBa,IAAI,CAACQ,GAAL,KAAaxB,MAAvC,EAA+C;AAE7CS,QAAAA,QAAQ,CAAChB,cAAc,CAACO,MAAD,CAAf,CAAR;AAEH,OAJC,MAIG;AACDI,QAAAA,OAAO,CAACY,IAAI,CAACb,IAAN,CAAP;AACAG,QAAAA,QAAQ,CAACU,IAAI,CAACX,KAAN,CAAR;AACAG,QAAAA,UAAU,CAACQ,IAAI,CAACT,OAAN,CAAV;AAEH;AAGJ;AAIJ,GA3BQ,EA2BP,CAACE,QAAD,EAAUT,MAAV,EAAiBD,OAAjB,EAAyBsB,aAAzB,EAAuCL,IAAvC,EAA4CD,KAA5C,CA3BO,CAAT;;AA6BF,QAAMU,aAAa,GAAIC,CAAD,IAAO;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AACAlB,IAAAA,QAAQ,CAACf,eAAe,CAAC;AAAC8B,MAAAA,GAAG,EAACxB,MAAL;AAAYG,MAAAA,IAAZ;AAAiBE,MAAAA,KAAjB;AAAuBE,MAAAA;AAAvB,KAAD,CAAhB,CAAR;AAEH,GAJC;;AAMA,sBACE;AAAA,4BACA,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,cAAT;AAAwB,MAAA,SAAS,EAAC,oBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAOA,QAAC,aAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAGIW,aAAa,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAHrB,EAIIC,WAAW,iBAAI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,QAAjB;AAA0B,QAAA,IAAI,EAAEJ;AAAhC;AAAA;AAAA;AAAA;AAAA,cAJnB,EAMGD,OAAO,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cANd,EAOGC,KAAK,iBAAI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,QAAjB;AAA0B,QAAA,IAAI,EAAEA;AAAhC;AAAA;AAAA;AAAA;AAAA,cAPZ,eASE,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEU,aAAhB;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,MAAtB;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,WAAW,EAAC,YAFd;AAGE,YAAA,KAAK,EAAEtB,IAHT;AAIE,YAAA,QAAQ,EAAGuB,CAAD,IAAOtB,OAAO,CAACsB,CAAC,CAACE,MAAF,CAASC,KAAV;AAJ1B;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAaE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,OAAtB;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,OADP;AAEE,YAAA,WAAW,EAAC,aAFd;AAGE,YAAA,KAAK,EAAExB,KAHT;AAIE,YAAA,QAAQ,EAAGqB,CAAD,IAAOpB,QAAQ,CAACoB,CAAC,CAACE,MAAF,CAASC,KAAV;AAJ3B;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,EAuBGb,IAAI,IAAI,CAACA,IAAI,CAACT,OAAd,iBAA0B,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,SAAtB;AAAgC,UAAA,SAAS,EAAC,MAA1C;AAAA,kCAE/B,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAF+B,eAG7B,QAAC,IAAD,CAAM,KAAN;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,WAAW,EAAC,UAFd;AAGE,YAAA,OAAO,EAAEA,OAHX;AAIE,YAAA,QAAQ,EAAGmB,CAAD,IAAO;AAAClB,cAAAA,UAAU,CAACkB,CAAC,CAACE,MAAF,CAASE,OAAV,CAAV;AAA6B;AAJjD;AAAA;AAAA;AAAA;AAAA,kBAH6B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvB7B,eAmCE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAC,SAA9B;AAAwC,UAAA,SAAS,EAAC,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnCF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPA;AAAA,kBADF;AA6DD,CAvHD;;GAAMjC,c;UAQaR,W,EAEGC,W,EAEFA,W,EAMCA,W;;;KAlBfO,c;AAyHN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport {getUserDetails,adminUpdateUser} from \"../redux/actions/userActions\";\nimport { USER_UPDATE_RESET} from \"../redux/types\";\nimport FormContainer from \"../components/FormContainer\";\n\nconst UserEditScreen = ({ match, history }) => {\n\n  const userID = match.params.id\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isAdmin, setIsAdmin] = useState(false);\n\n\n  const dispatch = useDispatch();\n\n  const userDetails = useSelector((state) => state.userDetails);\n\n  const userLogin = useSelector((state) => state.userLogin);\n\n  const { userInfo } = userLogin;\n\n  const { loading, error, user} = userDetails;\n\n  const updateUser = useSelector((state) => state.updateUser);\n\n  const { loading:loadingUpdate, error:errorUpdate, success:successUpdate } = updateUser;\n\n  \n    useEffect(() =>{\n      if(!userInfo.isAdmin){\n        history.push('/')\n      }\n        //checks if update user is success\n        if(successUpdate){\n            dispatch({type:USER_UPDATE_RESET})\n            history.push('/admin/users')\n        }else{\n       \n          \n              if (!user ||!user.name || user._id !== userID) {\n          \n                dispatch(getUserDetails(userID)) \n              \n            }else{\n                setName(user.name)\n                setEmail(user.email)\n                setIsAdmin(user.isAdmin)\n           \n            }\n            \n            \n        }\n        \n       \n     \n    },[dispatch,userID,history,successUpdate,user,error])\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(adminUpdateUser({_id:userID,name,email,isAdmin}))\n    \n};\n\n  return (\n    <>\n    <Link to='/admin/users' className='btn btn-light my-3'>\n      Go Back\n    </Link>\n\n    {}\n  \n    <FormContainer>\n      <h1>Edit User</h1>\n       \n       {loadingUpdate && <Loader/>}\n       {errorUpdate && <Message variant=\"danger\" text={error}/>}\n\n      {loading && <Loader />}\n      {error && <Message variant=\"danger\" text={error}/>}\n    \n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId=\"name\">\n          <Form.Label>Name</Form.Label>\n\n     \n          <Form.Control\n            type=\"name\"\n            placeholder=\"Enter name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"email\">\n          <Form.Label>Email Address</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Enter email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        {user && !user.isAdmin &&  <Form.Group controlId=\"isadmin\" className=\"mt-3\">\n    \n    <Form.Label>Admin</Form.Label>\n      <Form.Check\n        type=\"checkbox\"\n        placeholder=\"is Admin\"\n        checked={isAdmin}\n        onChange={(e) => {setIsAdmin(e.target.checked)}}\n      ></Form.Check>\n    </Form.Group>}\n       \n\n        <Button type=\"submit\" variant=\"primary\" className=\"mt-3\">\n          Update\n        </Button>\n      </Form>\n\n    \n    </FormContainer>\n    </>\n  );\n};\n\nexport default UserEditScreen;\n"]},"metadata":{},"sourceType":"module"}