{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/web/react/store/client/src/components/EditCategory.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editCategory, getCategoryDetails } from \"../redux/actions/categoryActions\";\nimport { CATEGORY_UPDATE_RESET } from \"../redux/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditCategory = _ref => {\n  _s();\n\n  let {\n    id,\n    history\n  } = _ref;\n  const dispatch = useDispatch();\n  const categoryDetails = useSelector(state => state.categoryDetailsReducer);\n  const {\n    category,\n    loading,\n    error\n  } = categoryDetails;\n  const categoryUpdate = useSelector(state => state.categoryUpdateReducer);\n  const {\n    success: successUpdate,\n    error: errorUpdate\n  } = categoryUpdate;\n  const [categoryInput, setCategoryInput] = useState({\n    department: \"\",\n    categoryName: \"\"\n  });\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    //checks if update product success\n    if (successUpdate) {\n      setMessage(\"category updated successfully\");\n      setTimeout(() => {\n        dispatch({\n          type: CATEGORY_UPDATE_RESET\n        });\n        history.push(\"/admin/api/get\");\n      }, 3000);\n    } else {\n      if (!category || category._id !== id) {\n        dispatch(getCategoryDetails(id));\n      }\n\n      setCategoryInput({\n        categoryName: category.categoryName,\n        department: category.department\n      });\n    }\n  }, [dispatch, id, history, successUpdate, error, errorUpdate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [successUpdate && /*#__PURE__*/_jsxDEV(Message, {\n      variant: successUpdate ? \"success\" : \"danger\",\n      text: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Modal.Dialog, {\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Update API specifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(FormContainer, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"color\",\n              className: \"mt-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                required: true,\n                type: \"text\",\n                placeholder: \"department e.g Mens/Womens\",\n                value: category.department,\n                onChange: e => setCategory({\n                  department: e.target.value,\n                  categoryName: category.categoryName\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                required: true,\n                type: \"text\",\n                placeholder: \"category name e.g Jackets\",\n                value: category.categoryName,\n                onChange: e => setCategory({\n                  categoryName: e.target.value,\n                  department: category.department\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => history.push(\"/admin/api/get\"),\n          children: \"Go Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => dispatch(editColor(colorInput, id)),\n          children: \"Save changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EditCategory, \"Y4I8KwEjEZe3+oWy3xQSdX2aIho=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = EditCategory;\nexport default EditCategory;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCategory\");","map":{"version":3,"sources":["/Users/alex/Documents/web/react/store/client/src/components/EditCategory.js"],"names":["React","useState","useEffect","Button","Form","Modal","FormContainer","Message","Loader","useDispatch","useSelector","editCategory","getCategoryDetails","CATEGORY_UPDATE_RESET","EditCategory","id","history","dispatch","categoryDetails","state","categoryDetailsReducer","category","loading","error","categoryUpdate","categoryUpdateReducer","success","successUpdate","errorUpdate","categoryInput","setCategoryInput","department","categoryName","message","setMessage","setTimeout","type","push","_id","e","setCategory","target","value","editColor","colorInput"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editCategory, getCategoryDetails } from \"../redux/actions/categoryActions\";\nimport { CATEGORY_UPDATE_RESET } from \"../redux/types\";\n\nconst EditCategory = ({ id, history }) => {\n\n  const dispatch = useDispatch();\n  const categoryDetails = useSelector((state) => state.categoryDetailsReducer);\n  const { category, loading, error } = categoryDetails;\n\n  const categoryUpdate = useSelector((state) => state.categoryUpdateReducer);\n  const { success: successUpdate, error: errorUpdate } = categoryUpdate;\n\n  const [categoryInput, setCategoryInput] = useState({\n    department: \"\",\n    categoryName: \"\",\n  });\n\n\n\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    //checks if update product success\n    if (successUpdate) {\n      setMessage(\"category updated successfully\");\n      setTimeout(() => {\n        dispatch({ type: CATEGORY_UPDATE_RESET });\n        history.push(\"/admin/api/get\");\n      }, 3000);\n    } else {\n      if (!category || category._id !== id) {\n        dispatch(getCategoryDetails(id));\n      }\n      setCategoryInput({ categoryName: category.categoryName, department:category.department });\n    }\n  }, [dispatch, id, history, successUpdate, error, errorUpdate]);\n\n  return (\n    <>\n      {successUpdate && (\n        <Message\n          variant={successUpdate ? \"success\" : \"danger\"}\n          text={message}\n        />\n      )}\n      {loading ? (\n        <Loader />\n      ) : (\n        <Modal.Dialog>\n          <Modal.Header>\n            <Modal.Title>Update API specifications</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <FormContainer>\n              <Form>\n                <Form.Group controlId=\"color\" className=\"mt-3\">\n                <Form.Label>Category</Form.Label>\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"department e.g Mens/Womens\"\n            value={category.department}\n            onChange={(e) => setCategory({department:e.target.value,categoryName:category.categoryName})}\n          ></Form.Control>\n\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"category name e.g Jackets\"\n            value={category.categoryName}\n            onChange={(e) => setCategory({categoryName:e.target.value,department:category.department})}\n          ></Form.Control>\n\n                </Form.Group>\n              </Form>\n            </FormContainer>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button\n              variant=\"secondary\"\n              onClick={() => history.push(\"/admin/api/get\")}\n            >\n              Go Back\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={() => dispatch(editColor(colorInput, id))}\n            >\n              Save changes\n            </Button>\n          </Modal.Footer>\n        </Modal.Dialog>\n      )}\n    </>\n  );\n};\n\nexport default EditCategory;\n"]},"metadata":{},"sourceType":"module"}