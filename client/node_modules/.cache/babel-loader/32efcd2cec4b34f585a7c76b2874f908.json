{"ast":null,"code":"import { CATEGORY_LIST_REQUEST, CATEGORY_LIST_SUCCESS, CATEGORY_LIST_FAIL, CATEGORY_DETAILS_REQUEST, CATEGORY_DETAILS_SUCCESS, CATEGORY_DETAILS_FAIL, CATEGORY_DELETE_REQUEST, CATEGORY_DELETE_SUCCESS, CATEGORY_DELETE_FAIL, CATEGORY_CREATE_REQUEST, CATEGORY_CREATE_SUCCESS, CATEGORY_CREATE_FAIL, CATEGORY_UPDATE_REQUEST, CATEGORY_UPDATE_SUCCESS, CATEGORY_UPDATE_FAIL } from \"../types\";\nimport axios from \"axios\";\nexport const getCategories = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CATEGORY_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/category`);\n    const {\n      categories\n    } = data;\n    let x = new Set([{\n      x: 1\n    }]);\n    console.log(x);\n    dispatch({\n      type: CATEGORY_LIST_SUCCESS,\n      payload: categories\n    });\n  } catch (error) {\n    dispatch({\n      type: CATEGORY_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getCategoryDetails = id => async dispatch => {\n  dispatch({\n    type: CATEGORY_DETAILS_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await axios.get(`/api/category/${id}`);\n    const {\n      category\n    } = data;\n\n    if (category) {\n      dispatch({\n        type: CATEGORY_DETAILS_SUCCESS,\n        payload: category\n      });\n    } else {\n      dispatch({\n        type: CATEGORY_DETAILS_FAIL,\n        payload: `Error : ${data.message} statusCode ${data.statusCode}`\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: CATEGORY_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteCategory = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CATEGORY_DELETE_REQUEST\n    });\n    const config = {\n      headers: {\n        Authorization: \"\"\n      }\n    };\n    await axios.delete(`/api/category/${id}`, config);\n    dispatch({\n      type: CATEGORY_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: CATEGORY_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createCategory = newCategory => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CATEGORY_CREATE_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/category`, newCategory, config);\n    dispatch({\n      type: CATEGORY_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CATEGORY_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const editCategory = currentCategory => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CATEGORY_UPDATE_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/category/${currentCategory._id}`, currentCategory, config);\n\n    if (data) {\n      dispatch({\n        type: CATEGORY_UPDATE_SUCCESS\n      });\n      dispatch({\n        type: CATEGORY_DETAILS_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: CATEGORY_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/alex/Documents/web/react/store/client/src/redux/actions/categoryActions.js"],"names":["CATEGORY_LIST_REQUEST","CATEGORY_LIST_SUCCESS","CATEGORY_LIST_FAIL","CATEGORY_DETAILS_REQUEST","CATEGORY_DETAILS_SUCCESS","CATEGORY_DETAILS_FAIL","CATEGORY_DELETE_REQUEST","CATEGORY_DELETE_SUCCESS","CATEGORY_DELETE_FAIL","CATEGORY_CREATE_REQUEST","CATEGORY_CREATE_SUCCESS","CATEGORY_CREATE_FAIL","CATEGORY_UPDATE_REQUEST","CATEGORY_UPDATE_SUCCESS","CATEGORY_UPDATE_FAIL","axios","getCategories","dispatch","getState","type","data","get","categories","x","Set","console","log","payload","error","response","message","getCategoryDetails","id","category","statusCode","deleteCategory","config","headers","Authorization","delete","createCategory","newCategory","post","editCategory","currentCategory","put","_id"],"mappings":"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","sourcesContent":["import {\n    CATEGORY_LIST_REQUEST,\n    CATEGORY_LIST_SUCCESS,\n    CATEGORY_LIST_FAIL,\n  \n    CATEGORY_DETAILS_REQUEST,\n    CATEGORY_DETAILS_SUCCESS,\n    CATEGORY_DETAILS_FAIL,\n  \n    CATEGORY_DELETE_REQUEST,\n    CATEGORY_DELETE_SUCCESS,\n    CATEGORY_DELETE_FAIL,\n  \n    CATEGORY_CREATE_REQUEST,\n    CATEGORY_CREATE_SUCCESS,\n    CATEGORY_CREATE_FAIL,\n  \n    CATEGORY_UPDATE_REQUEST,\n    CATEGORY_UPDATE_SUCCESS,\n    CATEGORY_UPDATE_FAIL,\n  \n  } from \"../types\";\n  import axios from \"axios\";\n  \n  \n  \n  export const getCategories = () => async (dispatch,getState) => {\n    \n      try {\n         \n              dispatch({type: CATEGORY_LIST_REQUEST})\n              const { data } = await axios.get(`/api/category`);\n              const {categories} = data\n              let x = new Set([{x:1,}])\n              console.log(x)\n             \n              dispatch({\n                type: CATEGORY_LIST_SUCCESS,\n                payload: categories\n               \n              });\n           \n            \n      \n    } catch (error) {\n        dispatch({\n            type:CATEGORY_LIST_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\n        })\n    }\n  };\n  \n  export const getCategoryDetails = (id) => async(dispatch)=>{\n      dispatch({type: CATEGORY_DETAILS_REQUEST})\n      try {\n  \n          const { data } = await axios.get(`/api/category/${id}`);\n          const {category} = data\n          if(category){\n\n              dispatch({\n                  type: CATEGORY_DETAILS_SUCCESS,\n                  payload: category\n                });\n              \n          }else{\n              dispatch({\n                  type:CATEGORY_DETAILS_FAIL,\n                  payload:`Error : ${data.message} statusCode ${data.statusCode}`\n              })\n          }\n        } catch (error) {\n            dispatch({\n                type:CATEGORY_DETAILS_FAIL,\n                payload: error.response && error.response.data.message ? error.response.data.message : error.message\n            })\n        }\n  }\n  \n  export const deleteCategory = (id) => async (dispatch,getState) => {\n      try {\n        dispatch({\n          type: CATEGORY_DELETE_REQUEST\n        });\n    \n        const config = {\n            headers: {\n              Authorization:\"\"\n            },\n          };\n      \n          await axios.delete(`/api/category/${id}`,config);\n        \n            dispatch({\n              type: CATEGORY_DELETE_SUCCESS\n            });\n    \n           \n      } catch (error) {\n        dispatch({\n            type: CATEGORY_DELETE_FAIL,\n            payload:\n              error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message,\n          });\n      }\n    };\n  \n  \n    export const createCategory = (newCategory) => async (dispatch,getState) => {\n      try {\n        dispatch({\n          type: CATEGORY_CREATE_REQUEST\n        });\n    \n      \n        const config = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization:\"\"\n            },\n          };\n    \n          const { data } = await axios.post(\n            `/api/category`,newCategory,\n            config\n          );\n          \n            dispatch({\n              type: CATEGORY_CREATE_SUCCESS,\n              payload: data,\n            });\n     \n      } catch (error) {\n        dispatch({\n            type: CATEGORY_CREATE_FAIL,\n            payload:\n              error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message,\n          });\n      }\n    };\n  \n  \n  export const editCategory = (currentCategory) => async (dispatch,getState) => {\n    try {\n      dispatch({\n        type: CATEGORY_UPDATE_REQUEST\n      });\n  \n  \n      const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization:\"\"\n          },\n        };\n  \n      const {data} = await axios.put(`/api/category/${currentCategory._id}`,currentCategory,config);\n   \n        if(data){\n          dispatch({\n            type: CATEGORY_UPDATE_SUCCESS,\n          });\n          dispatch({\n            type: CATEGORY_DETAILS_SUCCESS,\n            payload:data\n          });\n   \n        }\n  \n    } catch (error) {\n      dispatch({\n          type: CATEGORY_UPDATE_FAIL,\n          payload:\n            error.response && error.response.data.message\n              ? error.response.data.message\n              : error.message,\n        });\n    }\n  };\n  "]},"metadata":{},"sourceType":"module"}